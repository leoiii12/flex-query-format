{"version":3,"sources":["../sql-formatter/node_modules/lodash/_freeGlobal.js","../sql-formatter/node_modules/lodash/_root.js","../sql-formatter/node_modules/lodash/_Symbol.js","../sql-formatter/node_modules/lodash/_arrayMap.js","../sql-formatter/node_modules/lodash/isArray.js","../sql-formatter/node_modules/lodash/_getRawTag.js","../sql-formatter/node_modules/lodash/_objectToString.js","../sql-formatter/node_modules/lodash/_baseGetTag.js","../sql-formatter/node_modules/lodash/isObjectLike.js","../sql-formatter/node_modules/lodash/isSymbol.js","../sql-formatter/node_modules/lodash/_baseToString.js","../sql-formatter/node_modules/lodash/_baseSlice.js","../sql-formatter/node_modules/lodash/_castSlice.js","../sql-formatter/node_modules/lodash/_baseFindIndex.js","../sql-formatter/node_modules/lodash/_baseIsNaN.js","../sql-formatter/node_modules/lodash/_strictIndexOf.js","../sql-formatter/node_modules/lodash/_baseIndexOf.js","../sql-formatter/node_modules/lodash/_charsEndIndex.js","../sql-formatter/node_modules/lodash/_asciiToArray.js","../sql-formatter/node_modules/lodash/_hasUnicode.js","../sql-formatter/node_modules/lodash/_unicodeToArray.js","../sql-formatter/node_modules/lodash/_stringToArray.js","../sql-formatter/node_modules/lodash/toString.js","../sql-formatter/node_modules/lodash/trimEnd.js","../sql-formatter/lib/core/tokenTypes.js","../sql-formatter/node_modules/lodash/_baseRepeat.js","../sql-formatter/node_modules/lodash/eq.js","../sql-formatter/node_modules/lodash/isObject.js","../sql-formatter/node_modules/lodash/isFunction.js","../sql-formatter/node_modules/lodash/isLength.js","../sql-formatter/node_modules/lodash/isArrayLike.js","../sql-formatter/node_modules/lodash/_isIndex.js","../sql-formatter/node_modules/lodash/_isIterateeCall.js","../sql-formatter/node_modules/lodash/toNumber.js","../sql-formatter/node_modules/lodash/toFinite.js","../sql-formatter/node_modules/lodash/toInteger.js","../sql-formatter/node_modules/lodash/repeat.js","../sql-formatter/node_modules/lodash/last.js","../sql-formatter/lib/core/Indentation.js","../sql-formatter/lib/core/InlineBlock.js","../sql-formatter/lib/core/Params.js","../sql-formatter/lib/core/Formatter.js","../sql-formatter/node_modules/lodash/_isPrototype.js","../sql-formatter/node_modules/lodash/_overArg.js","../sql-formatter/node_modules/lodash/_nativeKeys.js","../sql-formatter/node_modules/lodash/_baseKeys.js","../sql-formatter/node_modules/lodash/_coreJsData.js","../sql-formatter/node_modules/lodash/_isMasked.js","../sql-formatter/node_modules/lodash/_toSource.js","../sql-formatter/node_modules/lodash/_baseIsNative.js","../sql-formatter/node_modules/lodash/_getValue.js","../sql-formatter/node_modules/lodash/_getNative.js","../sql-formatter/node_modules/lodash/_DataView.js","../sql-formatter/node_modules/lodash/_Map.js","../sql-formatter/node_modules/lodash/_Promise.js","../sql-formatter/node_modules/lodash/_Set.js","../sql-formatter/node_modules/lodash/_WeakMap.js","../sql-formatter/node_modules/lodash/_getTag.js","../sql-formatter/node_modules/lodash/_baseIsArguments.js","../sql-formatter/node_modules/lodash/isArguments.js","../sql-formatter/node_modules/lodash/stubFalse.js","../sql-formatter/node_modules/lodash/isBuffer.js","../sql-formatter/node_modules/lodash/_baseIsTypedArray.js","../sql-formatter/node_modules/lodash/_baseUnary.js","../sql-formatter/node_modules/lodash/_nodeUtil.js","../sql-formatter/node_modules/lodash/isTypedArray.js","../sql-formatter/node_modules/lodash/isEmpty.js","../sql-formatter/node_modules/lodash/escapeRegExp.js","../sql-formatter/lib/core/Tokenizer.js","../sql-formatter/lib/languages/Db2Formatter.js","../sql-formatter/lib/languages/N1qlFormatter.js","../sql-formatter/lib/languages/PlSqlFormatter.js","../sql-formatter/lib/languages/StandardSqlFormatter.js","../sql-formatter/lib/sqlFormatter.js","script.js"],"names":["exports","__esModule","WHITESPACE","WORD","STRING","RESERVED","RESERVED_TOPLEVEL","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","module","_repeat","require","_repeat2","_interopRequireDefault","_last","_last2","obj","_classCallCheck","instance","Constructor","TypeError","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","indentTypes","prototype","getIndent","length","increaseToplevel","push","increaseBlockLevel","decreaseTopLevel","pop","decreaseBlockLevel","type","_tokenTypes","_tokenTypes2","INLINE_MAX_LENGTH","InlineBlock","level","beginIfPossible","tokens","index","isInlineBlock","end","isActive","i","token","value","isForbiddenToken","_ref","COMMENT","Params","params","get","key","_trimEnd","_trimEnd2","_Indentation","_Indentation2","_InlineBlock","_InlineBlock2","_Params","_Params2","Formatter","cfg","tokenizer","indentation","inlineBlock","previousReservedWord","format","query","formattedQuery","tokenize","getFormattedQueryFromTokens","trim","_this","forEach","formatLineComment","formatBlockComment","formatToplevelReservedWord","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","formatQuerySeparator","addNewline","indentComment","comment","replace","equalizeWhitespace","string","includes","previousToken","trimTrailingWhitespace","test","previousNonWhitespaceToken","n","offset","arguments","undefined","_isEmpty","_isEmpty2","_escapeRegExp","_escapeRegExp2","Tokenizer","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","createLineCommentRegex","lineCommentTypes","RESERVED_TOPLEVEL_REGEX","createReservedWordRegex","reservedToplevelWords","RESERVED_NEWLINE_REGEX","reservedNewlineWords","RESERVED_PLAIN_REGEX","reservedWords","WORD_REGEX","createWordRegex","specialWordChars","STRING_REGEX","createStringRegex","stringTypes","OPEN_PAREN_REGEX","createParenRegex","openParens","CLOSE_PAREN_REGEX","closeParens","INDEXED_PLACEHOLDER_REGEX","createPlaceholderRegex","indexedPlaceholderTypes","IDENT_NAMED_PLACEHOLDER_REGEX","namedPlaceholderTypes","STRING_NAMED_PLACEHOLDER_REGEX","createStringPattern","RegExp","map","c","join","reservedWordsPattern","specialChars","patterns","t","parens","p","escapeParen","paren","types","pattern","typesRegex","input","getNextToken","substring","getWhitespaceToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getTokenOnFirstMatch","regex","getLineCommentToken","getBlockCommentToken","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","slice","_this2","getEscapedPlaceholderKey","quoteChar","_ref2","getToplevelReservedToken","getNewlineReservedToken","getPlainReservedToken","_ref3","matches","match","_Formatter","_Formatter2","_Tokenizer","_Tokenizer2","Db2Formatter","N1qlFormatter","PlSqlFormatter","StandardSqlFormatter","_Db2Formatter","_Db2Formatter2","_N1qlFormatter","_N1qlFormatter2","_PlSqlFormatter","_PlSqlFormatter2","_StandardSqlFormatter","_StandardSqlFormatter2","language","Error","sqlFormatter","onClickFormat","src","document","getElementById"],"mappings":";;AAIA,IAAA,EAAA,UAAA,GAHA,EAAA,iBAAA,GAAA,GAAA,EAAA,SAAA,QAAA,EAEA,OAAA,QAAA;;ACHA,IAAA,EAAA,QAAA,iBAGA,EAAA,iBAAA,MAAA,MAAA,KAAA,SAAA,QAAA,KAGA,EAAA,GAAA,GAAA,SAAA,cAAA,GAEA,OAAA,QAAA;;ACRA,IAAA,EAAA,QAAA,WAGA,EAAA,EAAA,OAEA,OAAA,QAAA;;ACIA,SAAA,EAAA,EAAA,GAKA,IAJA,IAAA,GAAA,EACA,EAAA,MAAA,EAAA,EAAA,EAAA,OACA,EAAA,MAAA,KAEA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAEA,OAAA,EAGA,OAAA,QAAA;;ACGA,IAAA,EAAA,MAAA,QAEA,OAAA,QAAA;;ACzBA,IAAA,EAAA,QAAA,aAGA,EAAA,OAAA,UAGA,EAAA,EAAA,eAOA,EAAA,EAAA,SAGA,EAAA,EAAA,EAAA,iBAAA,EASA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,EAAA,GACA,EAAA,EAAA,GAEA,IACA,EAAA,QAAA,EACA,IAAA,GAAA,EACA,MAAA,IAEA,IAAA,EAAA,EAAA,KAAA,GAQA,OAPA,IACA,EACA,EAAA,GAAA,SAEA,EAAA,IAGA,EAGA,OAAA,QAAA;;AC5CA,IAAA,EAAA,OAAA,UAOA,EAAA,EAAA,SASA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,GAGA,OAAA,QAAA;;ACrBA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,gBACA,EAAA,QAAA,qBAGA,EAAA,gBACA,EAAA,qBAGA,EAAA,EAAA,EAAA,iBAAA,EASA,SAAA,EAAA,GACA,OAAA,MAAA,OACA,IAAA,EAAA,EAAA,EAEA,GAAA,KAAA,OAAA,GACA,EAAA,GACA,EAAA,GAGA,OAAA,QAAA;;ACHA,SAAA,EAAA,GACA,OAAA,MAAA,GAAA,iBAAA,EAGA,OAAA,QAAA;;AC5BA,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,kBAGA,EAAA,kBAmBA,SAAA,EAAA,GACA,MAAA,iBAAA,GACA,EAAA,IAAA,EAAA,IAAA,EAGA,OAAA,QAAA;;AC5BA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,eACA,EAAA,QAAA,aACA,EAAA,QAAA,cAGA,EAAA,EAAA,EAGA,EAAA,EAAA,EAAA,eAAA,EACA,EAAA,EAAA,EAAA,cAAA,EAUA,SAAA,EAAA,GAEA,GAAA,iBAAA,EACA,OAAA,EAEA,GAAA,EAAA,GAEA,OAAA,EAAA,EAAA,GAAA,GAEA,GAAA,EAAA,GACA,OAAA,EAAA,EAAA,KAAA,GAAA,GAEA,IAAA,EAAA,EAAA,GACA,MAAA,KAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAGA,OAAA,QAAA;;AC3BA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,GAAA,EACA,EAAA,EAAA,OAEA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,EAAA,EAAA,EAAA,GACA,IACA,GAAA,GAEA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,KAAA,EAGA,IADA,IAAA,EAAA,MAAA,KACA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GAEA,OAAA,EAGA,OAAA,QAAA;;AC9BA,IAAA,EAAA,QAAA,gBAWA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAEA,OADA,OAAA,IAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,EAAA,EAAA,EAAA,GAIA,IAHA,IAAA,EAAA,EAAA,OACA,EAAA,GAAA,EAAA,GAAA,GAEA,EAAA,MAAA,EAAA,GACA,GAAA,EAAA,EAAA,GAAA,EAAA,GACA,OAAA,EAGA,OAAA,EAGA,OAAA,QAAA;;AChBA,SAAA,EAAA,GACA,OAAA,GAAA,EAGA,OAAA,QAAA;;ACDA,SAAA,EAAA,EAAA,EAAA,GAIA,IAHA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,SAEA,EAAA,GACA,GAAA,EAAA,KAAA,EACA,OAAA,EAGA,OAAA,EAGA,OAAA,QAAA;;ACtBA,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,gBACA,EAAA,QAAA,oBAWA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GAAA,EACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACnBA,IAAA,EAAA,QAAA,kBAWA,SAAA,EAAA,EAAA,GAGA,IAFA,IAAA,EAAA,EAAA,OAEA,KAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IACA,OAAA,EAGA,OAAA,QAAA;;ACXA,SAAA,EAAA,GACA,OAAA,EAAA,MAAA,IAGA,OAAA,QAAA;;ACVA,IAAA,EAAA,kBACA,EAAA,kBACA,EAAA,kBACA,EAAA,kBACA,EAAA,EAAA,EAAA,EACA,EAAA,iBAGA,EAAA,UAGA,EAAA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KASA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,GAGA,OAAA,QAAA;;ACxBA,IAAA,EAAA,kBACA,EAAA,kBACA,EAAA,kBACA,EAAA,kBACA,EAAA,EAAA,EAAA,EACA,EAAA,iBAGA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,2BACA,EAAA,MAAA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,kCACA,EAAA,qCACA,EAAA,UAGA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,KACA,EAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,KAAA,KAAA,IAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,EACA,EAAA,MAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,KAAA,IAGA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,EAAA,KASA,SAAA,EAAA,GACA,OAAA,EAAA,MAAA,IAAA,GAGA,OAAA,QAAA;;ACvCA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,iBACA,EAAA,QAAA,qBASA,SAAA,EAAA,GACA,OAAA,EAAA,GACA,EAAA,GACA,EAAA,GAGA,OAAA,QAAA;;ACjBA,IAAA,EAAA,QAAA,mBAuBA,SAAA,EAAA,GACA,OAAA,MAAA,EAAA,GAAA,EAAA,GAGA,OAAA,QAAA;;AC3BA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,gBACA,EAAA,QAAA,oBACA,EAAA,QAAA,oBACA,EAAA,QAAA,cAGA,EAAA,OAqBA,SAAA,EAAA,EAAA,EAAA,GAEA,IADA,EAAA,EAAA,MACA,QAAA,IAAA,GACA,OAAA,EAAA,QAAA,EAAA,IAEA,IAAA,KAAA,EAAA,EAAA,IACA,OAAA,EAEA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAAA,EAEA,OAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAGA,OAAA,QAAA;;AC1CA,aAEAA,QAAQC,YAAa,EAIrBD,QAAO,QAAc,CACjBE,WAAY,aACZC,KAAM,OACNC,OAAQ,SACRC,SAAU,WACVC,kBAAmB,oBACnBC,iBAAkB,mBAClBC,SAAU,WACVC,WAAY,aACZC,YAAa,cACbC,aAAc,eACdC,cAAe,gBACfC,OAAQ,SACRC,YAAa,eAEjBC,OAAOf,QAAUA,QAAO;;ACpBxB,IAAA,EAAA,iBAGA,EAAA,KAAA,MAUA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,GAAA,EAAA,GAAA,EAAA,EACA,OAAA,EAIA,GACA,EAAA,IACA,GAAA,IAEA,EAAA,EAAA,EAAA,MAEA,GAAA,SAEA,GAEA,OAAA,EAGA,OAAA,QAAA;;ACFA,SAAA,EAAA,EAAA,GACA,OAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAGA,OAAA,QAAA;;ACXA,SAAA,EAAA,GACA,IAAA,SAAA,EACA,OAAA,MAAA,IAAA,UAAA,GAAA,YAAA,GAGA,OAAA,QAAA;;AC9BA,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,cAGA,EAAA,yBACA,EAAA,oBACA,EAAA,6BACA,EAAA,iBAmBA,SAAA,EAAA,GACA,IAAA,EAAA,GACA,OAAA,EAIA,IAAA,EAAA,EAAA,GACA,OAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAGA,OAAA,QAAA;;ACnCA,IAAA,EAAA,iBA4BA,SAAA,EAAA,GACA,MAAA,iBAAA,GACA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAGA,OAAA,QAAA;;AClCA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,cA2BA,SAAA,EAAA,GACA,OAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,GAGA,OAAA,QAAA;;AC/BA,IAAA,EAAA,iBAGA,EAAA,mBAUA,SAAA,EAAA,EAAA,GACA,IAAA,SAAA,EAGA,SAFA,EAAA,MAAA,EAAA,EAAA,KAGA,UAAA,GACA,UAAA,GAAA,EAAA,KAAA,KACA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAGA,OAAA,QAAA;;ACxBA,IAAA,EAAA,QAAA,QACA,EAAA,QAAA,iBACA,EAAA,QAAA,cACA,EAAA,QAAA,cAYA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,GACA,OAAA,EAEA,IAAA,SAAA,EACA,SAAA,UAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,QACA,UAAA,GAAA,KAAA,IAEA,EAAA,EAAA,GAAA,GAKA,OAAA,QAAA;;AC7BA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,cAGA,EAAA,IAGA,EAAA,aAGA,EAAA,qBAGA,EAAA,aAGA,EAAA,cAGA,EAAA,SAyBA,SAAA,EAAA,GACA,GAAA,iBAAA,EACA,OAAA,EAEA,GAAA,EAAA,GACA,OAAA,EAEA,GAAA,EAAA,GAAA,CACA,IAAA,EAAA,mBAAA,EAAA,QAAA,EAAA,UAAA,EACA,EAAA,EAAA,GAAA,EAAA,GAAA,EAEA,GAAA,iBAAA,EACA,OAAA,IAAA,EAAA,GAAA,EAEA,EAAA,EAAA,QAAA,EAAA,IACA,IAAA,EAAA,EAAA,KAAA,GACA,OAAA,GAAA,EAAA,KAAA,GACA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,GACA,EAAA,KAAA,GAAA,GAAA,EAGA,OAAA,QAAA;;ACjEA,IAAA,EAAA,QAAA,cAGA,EAAA,EAAA,EACA,EAAA,uBAyBA,SAAA,EAAA,GACA,OAAA,GAGA,EAAA,EAAA,MACA,GAAA,KAAA,GACA,EAAA,GAAA,EAAA,GACA,EAEA,GAAA,EAAA,EAAA,EAPA,IAAA,EAAA,EAAA,EAUA,OAAA,QAAA;;ACzCA,IAAA,EAAA,QAAA,cA4BA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAEA,OAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAGA,OAAA,QAAA;;ACnCA,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,qBACA,EAAA,QAAA,eACA,EAAA,QAAA,cAwBA,SAAA,EAAA,EAAA,EAAA,GAMA,OAJA,GADA,EAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GACA,EAEA,EAAA,GAEA,EAAA,EAAA,GAAA,GAGA,OAAA,QAAA;;ACtBA,SAAA,EAAA,GACA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,OACA,OAAA,EAAA,EAAA,EAAA,QAAA,EAGA,OAAA,QAAA;;ACnBA,aAEAA,QAAQC,YAAa,EAErB,IAAIe,EAAUC,QAAQ,iBAElBC,EAAWC,EAAuBH,GAElCI,EAAQH,QAAQ,eAEhBI,EAASF,EAAuBC,GAEpC,SAASD,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAIC,EAAwB,YACxBC,EAA0B,cAW1BC,EAAc,WAILA,SAAAA,EAAYC,GACjBP,EAAgB,KAAMM,GAEjBC,KAAAA,OAASA,GAAU,KACnBC,KAAAA,YAAc,GA2DhBF,OAlDPA,EAAYG,UAAUC,UAAY,WACvB,OAAA,EAAIf,EAAQ,SAAa,KAAKY,OAAQ,KAAKC,YAAYG,SAQlEL,EAAYG,UAAUG,iBAAmB,WAChCJ,KAAAA,YAAYK,KAAKT,IAQ1BE,EAAYG,UAAUK,mBAAqB,WAClCN,KAAAA,YAAYK,KAAKR,IAS1BC,EAAYG,UAAUM,iBAAmB,YACjC,EAAIjB,EAAM,SAAa,KAAKU,eAAiBJ,GACxCI,KAAAA,YAAYQ,OAWzBV,EAAYG,UAAUQ,mBAAqB,WAChC,KAAA,KAAKT,YAAYG,OAAS,GAAG,CAE5BO,GADO,KAAKV,YAAYQ,QACfZ,EACT,QAKLE,EAnEO,GAsElB7B,QAAO,QAAc6B,EACrBd,OAAOf,QAAUA,QAAO;;ACnGxB,aAEAA,QAAQC,YAAa,EAErB,IAAIyC,EAAczB,QAAQ,gBAEtB0B,EAAexB,EAAuBuB,GAE1C,SAASvB,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAIkB,EAAoB,GAUpBC,EAAc,WACLA,SAAAA,IACLtB,EAAgB,KAAMsB,GAEjBC,KAAAA,MAAQ,EAqFVD,OA1EPA,EAAYb,UAAUe,gBAAkB,SAAyBC,EAAQC,GAClD,IAAf,KAAKH,OAAe,KAAKI,cAAcF,EAAQC,GAC1CH,KAAAA,MAAQ,EACN,KAAKA,MAAQ,EACfA,KAAAA,QAEAA,KAAAA,MAAQ,GAUrBD,EAAYb,UAAUmB,IAAM,WACnBL,KAAAA,SASTD,EAAYb,UAAUoB,SAAW,WACtB,OAAA,KAAKN,MAAQ,GAOxBD,EAAYb,UAAUkB,cAAgB,SAAuBF,EAAQC,GAI5D,IAHDf,IAAAA,EAAS,EACTY,EAAQ,EAEHO,EAAIJ,EAAOI,EAAIL,EAAOd,OAAQmB,IAAK,CACpCC,IAAAA,EAAQN,EAAOK,GAIfnB,IAHJA,GAAUoB,EAAMC,MAAMrB,QAGTU,EACF,OAAA,EAGPU,GAAAA,EAAMb,OAASE,EAAY,QAAYlC,WACvCqC,SACG,GAAIQ,EAAMb,OAASE,EAAY,QAAYjC,aAEhC,MADdoC,EAEW,OAAA,EAIX,GAAA,KAAKU,iBAAiBF,GACf,OAAA,EAGR,OAAA,GAOXT,EAAYb,UAAUwB,iBAAmB,SAA0BC,GAC3DhB,IAAAA,EAAOgB,EAAKhB,KACZc,EAAQE,EAAKF,MAEVd,OAAAA,IAASE,EAAY,QAAYrC,mBAAqBmC,IAASE,EAAY,QAAYpC,kBAAoBkC,IAASE,EAAY,QAAYe,SAAWjB,IAASE,EAAY,QAAY/B,eAA2B,MAAV2C,GAG7MV,EAzFO,GA4FlB7C,QAAO,QAAc6C,EACrB9B,OAAOf,QAAUA,QAAO;;ACnHxB,aAIA,SAASuB,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAFhH1B,QAAQC,YAAa,EAOrB,IAAI0D,EAAS,WAIAA,SAAAA,EAAOC,GACZrC,EAAgB,KAAMoC,GAEjBC,KAAAA,OAASA,EACTX,KAAAA,MAAQ,EAyBVU,OAbPA,EAAO3B,UAAU6B,IAAM,SAAaJ,GAC5BK,IAAAA,EAAML,EAAKK,IACXP,EAAQE,EAAKF,MAEb,OAAC,KAAKK,OAGNE,EACO,KAAKF,OAAOE,GAEhB,KAAKF,OAAO,KAAKX,SALbM,GAQRI,EAjCE,GAoCb3D,QAAO,QAAc2D,EACrB5C,OAAOf,QAAUA,QAAO;;AC9CxB,aAEAA,QAAQC,YAAa,EAErB,IAAI8D,EAAW9C,QAAQ,kBAEnB+C,EAAY7C,EAAuB4C,GAEnCrB,EAAczB,QAAQ,gBAEtB0B,EAAexB,EAAuBuB,GAEtCuB,EAAehD,QAAQ,iBAEvBiD,EAAgB/C,EAAuB8C,GAEvCE,EAAelD,QAAQ,iBAEvBmD,EAAgBjD,EAAuBgD,GAEvCE,EAAUpD,QAAQ,YAElBqD,EAAWnD,EAAuBkD,GAEtC,SAASlD,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAI6C,EAAY,WAOHA,SAAAA,EAAUC,EAAKC,GACpBlD,EAAgB,KAAMgD,GAEjBC,KAAAA,IAAMA,GAAO,GACbE,KAAAA,YAAc,IAAIR,EAAa,QAAY,KAAKM,IAAI1C,QACpD6C,KAAAA,YAAc,IAAIP,EAAa,QAC/BR,KAAAA,OAAS,IAAIU,EAAQ,QAAY,KAAKE,IAAIZ,QAC1Ca,KAAAA,UAAYA,EACZG,KAAAA,qBAAuB,GACvB5B,KAAAA,OAAS,GACTC,KAAAA,MAAQ,EA+LVsB,OApLPA,EAAUvC,UAAU6C,OAAS,SAAgBC,GAIlCC,OAHF/B,KAAAA,OAAS,KAAKyB,UAAUO,SAASF,GACjB,KAAKG,8BAEJC,QAG1BX,EAAUvC,UAAUiD,4BAA8B,WAC1CE,IAAAA,EAAQ,KAERJ,EAAiB,GAsCdA,OApCF/B,KAAAA,OAAOoC,QAAQ,SAAU9B,EAAOL,GACjCkC,EAAMlC,MAAQA,EAEVK,EAAMb,OAASE,EAAY,QAAYzC,aAEhCoD,EAAMb,OAASE,EAAY,QAAYhC,aAC9CoE,EAAiBI,EAAME,kBAAkB/B,EAAOyB,GACzCzB,EAAMb,OAASE,EAAY,QAAY/B,cAC9CmE,EAAiBI,EAAMG,mBAAmBhC,EAAOyB,GAC1CzB,EAAMb,OAASE,EAAY,QAAYrC,mBAC9CyE,EAAiBI,EAAMI,2BAA2BjC,EAAOyB,GACzDI,EAAMP,qBAAuBtB,GACtBA,EAAMb,OAASE,EAAY,QAAYpC,kBAC9CwE,EAAiBI,EAAMK,0BAA0BlC,EAAOyB,GACxDI,EAAMP,qBAAuBtB,GACtBA,EAAMb,OAASE,EAAY,QAAYtC,UAC9C0E,EAAiBI,EAAMM,iBAAiBnC,EAAOyB,GAC/CI,EAAMP,qBAAuBtB,GAE7ByB,EADOzB,EAAMb,OAASE,EAAY,QAAYlC,WAC7B0E,EAAMO,yBAAyBpC,EAAOyB,GAChDzB,EAAMb,OAASE,EAAY,QAAYjC,YAC7ByE,EAAMQ,yBAAyBrC,EAAOyB,GAChDzB,EAAMb,OAASE,EAAY,QAAY7B,YAC7BqE,EAAMS,kBAAkBtC,EAAOyB,GACzB,MAAhBzB,EAAMC,MACI4B,EAAMU,YAAYvC,EAAOyB,GACnB,MAAhBzB,EAAMC,MACI4B,EAAMW,qBAAqBxC,EAAOyB,GAC5B,MAAhBzB,EAAMC,MACI4B,EAAMY,oBAAoBzC,EAAOyB,GAC3B,MAAhBzB,EAAMC,MACI4B,EAAMa,qBAAqB1C,EAAOyB,GAElCI,EAAMM,iBAAiBnC,EAAOyB,MAGhDA,GAGXR,EAAUvC,UAAUqD,kBAAoB,SAA2B/B,EAAOwB,GAC/D,OAAA,KAAKmB,WAAWnB,EAAQxB,EAAMC,QAGzCgB,EAAUvC,UAAUsD,mBAAqB,SAA4BhC,EAAOwB,GACjE,OAAA,KAAKmB,WAAW,KAAKA,WAAWnB,GAAS,KAAKoB,cAAc5C,EAAMC,SAG7EgB,EAAUvC,UAAUkE,cAAgB,SAAuBC,GAChDA,OAAAA,EAAQC,QAAQ,MAAO,KAAO,KAAK1B,YAAYzC,cAG1DsC,EAAUvC,UAAUuD,2BAA6B,SAAoCjC,EAAOwB,GAQjF,OAPFJ,KAAAA,YAAYpC,mBAEjBwC,EAAQ,KAAKmB,WAAWnB,GAEnBJ,KAAAA,YAAYvC,mBAEjB2C,GAAS,KAAKuB,mBAAmB/C,EAAMC,OAChC,KAAK0C,WAAWnB,IAG3BP,EAAUvC,UAAUwD,0BAA4B,SAAmClC,EAAOwB,GAC/E,OAAA,KAAKmB,WAAWnB,GAAS,KAAKuB,mBAAmB/C,EAAMC,OAAS,KAM3EgB,EAAUvC,UAAUqE,mBAAqB,SAA4BC,GAC1DA,OAAAA,EAAOF,QAAQ,OAAQ,MAMlC7B,EAAUvC,UAAU0D,yBAA2B,SAAkCpC,EAAOwB,GAe7EA,MAZqB,CAACnC,EAAY,QAAYzC,WAAYyC,EAAY,QAAYlC,WAAYkC,EAAY,QAAYhC,cAClG4F,SAAS,KAAKC,gBAAgB/D,QACrDqC,GAAQ,EAAId,EAAS,SAAac,IAEtCA,GAASxB,EAAMC,MAEVoB,KAAAA,YAAY5B,gBAAgB,KAAKC,OAAQ,KAAKC,OAE9C,KAAK0B,YAAYvB,aACbsB,KAAAA,YAAYrC,qBACjByC,EAAQ,KAAKmB,WAAWnB,IAErBA,GAMXP,EAAUvC,UAAU2D,yBAA2B,SAAkCrC,EAAOwB,GAChF,OAAA,KAAKH,YAAYvB,YACZuB,KAAAA,YAAYxB,MACV,KAAK2C,qBAAqBxC,EAAOwB,KAEnCJ,KAAAA,YAAYlC,qBACV,KAAKiD,iBAAiBnC,EAAO,KAAK2C,WAAWnB,MAI5DP,EAAUvC,UAAU4D,kBAAoB,SAA2BtC,EAAOwB,GAC/DA,OAAAA,EAAQ,KAAKlB,OAAOC,IAAIP,GAAS,KAM5CiB,EAAUvC,UAAU6D,YAAc,SAAqBvC,EAAOwB,GAGtD,OAFJA,EAAQ,KAAK2B,uBAAuB3B,GAASxB,EAAMC,MAAQ,IAEvD,KAAKoB,YAAYvB,WACV0B,EACA,WAAW4B,KAAK,KAAK9B,qBAAqBrB,OAC1CuB,EAEA,KAAKmB,WAAWnB,IAI/BP,EAAUvC,UAAU8D,qBAAuB,SAA8BxC,EAAOwB,GACrE,OAAA,KAAK2B,uBAAuB3B,GAASxB,EAAMC,MAAQ,KAG9DgB,EAAUvC,UAAU+D,oBAAsB,SAA6BzC,EAAOwB,GACnE,OAAA,KAAK2B,uBAAuB3B,GAASxB,EAAMC,OAGtDgB,EAAUvC,UAAUyD,iBAAmB,SAA0BnC,EAAOwB,GAC7DA,OAAAA,EAAQxB,EAAMC,MAAQ,KAGjCgB,EAAUvC,UAAUgE,qBAAuB,SAA8B1C,EAAOwB,GACrE,OAAA,KAAK2B,uBAAuB3B,GAASxB,EAAMC,MAAQ,MAG9DgB,EAAUvC,UAAUiE,WAAa,SAAoBnB,GAC1C,OAAA,EAAId,EAAS,SAAac,GAAS,KAAO,KAAKJ,YAAYzC,aAGtEsC,EAAUvC,UAAUyE,uBAAyB,SAAgC3B,GACrE,OAAA,KAAK6B,6BAA6BlE,OAASE,EAAY,QAAYhC,cAC5D,EAAIqD,EAAS,SAAac,GAAS,MAEnC,EAAId,EAAS,SAAac,IAIzCP,EAAUvC,UAAU2E,2BAA6B,WAEtC,IADHC,IAAAA,EAAI,EACD,KAAKJ,cAAcI,GAAGnE,OAASE,EAAY,QAAYzC,YAC1D0G,IAEG,OAAA,KAAKJ,cAAcI,IAG9BrC,EAAUvC,UAAUwE,cAAgB,WAC5BK,IAAAA,EAASC,UAAU5E,OAAS,QAAsB6E,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,EAE1E,OAAA,KAAK9D,OAAO,KAAKC,MAAQ4D,IAAW,IAGxCtC,EAhNK,GAmNhBvE,QAAO,QAAcuE,EACrBxD,OAAOf,QAAUA,QAAO;;AC/OxB,IAAA,EAAA,OAAA,UASA,SAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,YAGA,OAAA,KAFA,mBAAA,GAAA,EAAA,WAAA,GAKA,OAAA,QAAA;;ACTA,SAAA,EAAA,EAAA,GACA,OAAA,SAAA,GACA,OAAA,EAAA,EAAA,KAIA,OAAA,QAAA;;ACdA,IAAA,EAAA,QAAA,cAGA,EAAA,EAAA,OAAA,KAAA,QAEA,OAAA,QAAA;;ACLA,IAAA,EAAA,QAAA,kBACA,EAAA,QAAA,iBAGA,EAAA,OAAA,UAGA,EAAA,EAAA,eASA,SAAA,EAAA,GACA,IAAA,EAAA,GACA,OAAA,EAAA,GAEA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,OAAA,GACA,EAAA,KAAA,EAAA,IAAA,eAAA,GACA,EAAA,KAAA,GAGA,OAAA,EAGA,OAAA,QAAA;;AC7BA,IAAA,EAAA,QAAA,WAGA,EAAA,EAAA,sBAEA,OAAA,QAAA;;ACLA,IAAA,EAAA,QAAA,iBAGA,EAAA,WACA,IAAA,EAAA,SAAA,KAAA,GAAA,EAAA,MAAA,EAAA,KAAA,UAAA,IACA,OAAA,EAAA,iBAAA,EAAA,GAFA,GAYA,SAAA,EAAA,GACA,QAAA,GAAA,KAAA,EAGA,OAAA,QAAA;;AClBA,IAAA,EAAA,SAAA,UAGA,EAAA,EAAA,SASA,SAAA,EAAA,GACA,GAAA,MAAA,EAAA,CACA,IACA,OAAA,EAAA,KAAA,GACA,MAAA,IACA,IACA,OAAA,EAAA,GACA,MAAA,KAEA,MAAA,GAGA,OAAA,QAAA;;ACzBA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,eACA,EAAA,QAAA,cACA,EAAA,QAAA,eAMA,EAAA,sBAGA,EAAA,8BAGA,EAAA,SAAA,UACA,EAAA,OAAA,UAGA,EAAA,EAAA,SAGA,EAAA,EAAA,eAGA,EAAA,OAAA,IACA,EAAA,KAAA,GAAA,QAAA,EAAA,QACA,QAAA,yDAAA,SAAA,KAWA,SAAA,EAAA,GACA,SAAA,EAAA,IAAA,EAAA,MAGA,EAAA,GAAA,EAAA,GACA,KAAA,EAAA,IAGA,OAAA,QAAA;;ACtCA,SAAA,EAAA,EAAA,GACA,OAAA,MAAA,OAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACZA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,eAUA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,GACA,OAAA,EAAA,GAAA,OAAA,EAGA,OAAA,QAAA;;AChBA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,WAGA,EAAA,EAAA,EAAA,YAEA,OAAA,QAAA;;ACNA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,WAGA,EAAA,EAAA,EAAA,OAEA,OAAA,QAAA;;ACNA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,WAGA,EAAA,EAAA,EAAA,WAEA,OAAA,QAAA;;ACNA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,WAGA,EAAA,EAAA,EAAA,OAEA,OAAA,QAAA;;ACNA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,WAGA,EAAA,EAAA,EAAA,WAEA,OAAA,QAAA;;ACNA,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,UACA,EAAA,QAAA,cACA,EAAA,QAAA,UACA,EAAA,QAAA,cACA,EAAA,QAAA,iBACA,EAAA,QAAA,eAGA,EAAA,eACA,EAAA,kBACA,EAAA,mBACA,EAAA,eACA,EAAA,mBAEA,EAAA,oBAGA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GASA,EAAA,GAGA,GAAA,EAAA,IAAA,EAAA,IAAA,YAAA,MAAA,GACA,GAAA,EAAA,IAAA,IAAA,GACA,GAAA,EAAA,EAAA,YAAA,GACA,GAAA,EAAA,IAAA,IAAA,GACA,GAAA,EAAA,IAAA,IAAA,KACA,EAAA,SAAA,GACA,IAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,iBAAA,EACA,EAAA,EAAA,EAAA,GAAA,GAEA,GAAA,EACA,OAAA,GACA,KAAA,EAAA,OAAA,EACA,KAAA,EAAA,OAAA,EACA,KAAA,EAAA,OAAA,EACA,KAAA,EAAA,OAAA,EACA,KAAA,EAAA,OAAA,EAGA,OAAA,IAIA,OAAA,QAAA;;ACzDA,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,kBAGA,EAAA,qBASA,SAAA,EAAA,GACA,OAAA,EAAA,IAAA,EAAA,IAAA,EAGA,OAAA,QAAA;;ACjBA,IAAA,EAAA,QAAA,sBACA,EAAA,QAAA,kBAGA,EAAA,OAAA,UAGA,EAAA,EAAA,eAGA,EAAA,EAAA,qBAoBA,EAAA,EAAA,WAAA,OAAA,UAAA,IAAA,EAAA,SAAA,GACA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,YACA,EAAA,KAAA,EAAA,WAGA,OAAA,QAAA;;ACtBA,SAAA,IACA,OAAA,EAGA,OAAA,QAAA;;;ACjBA,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,eAGA,EAAA,iBAAA,SAAA,UAAA,QAAA,UAAA,QAGA,EAAA,GAAA,iBAAA,QAAA,SAAA,OAAA,UAAA,OAGA,EAAA,GAAA,EAAA,UAAA,EAGA,EAAA,EAAA,EAAA,YAAA,EAGA,EAAA,EAAA,EAAA,cAAA,EAmBA,EAAA,GAAA,EAEA,OAAA,QAAA;;ACrCA,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,cACA,EAAA,QAAA,kBAGA,EAAA,qBACA,EAAA,iBACA,EAAA,mBACA,EAAA,gBACA,EAAA,iBACA,EAAA,oBACA,EAAA,eACA,EAAA,kBACA,EAAA,kBACA,EAAA,kBACA,EAAA,eACA,EAAA,kBACA,EAAA,mBAEA,EAAA,uBACA,EAAA,oBACA,EAAA,wBACA,EAAA,wBACA,EAAA,qBACA,EAAA,sBACA,EAAA,sBACA,EAAA,sBACA,EAAA,6BACA,EAAA,uBACA,EAAA,uBAGA,EAAA,GAsBA,SAAA,EAAA,GACA,OAAA,EAAA,IACA,EAAA,EAAA,WAAA,EAAA,EAAA,IAvBA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAcA,OAAA,QAAA;;ACpDA,SAAA,EAAA,GACA,OAAA,SAAA,GACA,OAAA,EAAA,IAIA,OAAA,QAAA;;ACbA,IAAA,EAAA,QAAA,iBAGA,EAAA,iBAAA,SAAA,UAAA,QAAA,UAAA,QAGA,EAAA,GAAA,iBAAA,QAAA,SAAA,OAAA,UAAA,OAGA,EAAA,GAAA,EAAA,UAAA,EAGA,EAAA,GAAA,EAAA,QAGA,EAAA,WACA,IAEA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,QAAA,QAAA,MAEA,OAAA,GAKA,GAAA,EAAA,SAAA,EAAA,QAAA,QACA,MAAA,KAXA,GAcA,OAAA,QAAA;;AC7BA,IAAA,EAAA,QAAA,uBACA,EAAA,QAAA,gBACA,EAAA,QAAA,eAGA,EAAA,GAAA,EAAA,aAmBA,EAAA,EAAA,EAAA,GAAA,EAEA,OAAA,QAAA;;AC1BA,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,aACA,EAAA,QAAA,iBACA,EAAA,QAAA,aACA,EAAA,QAAA,iBACA,EAAA,QAAA,cACA,EAAA,QAAA,kBACA,EAAA,QAAA,kBAGA,EAAA,eACA,EAAA,eAGA,EAAA,OAAA,UAGA,EAAA,EAAA,eAmCA,SAAA,EAAA,GACA,GAAA,MAAA,EACA,OAAA,EAEA,GAAA,EAAA,KACA,EAAA,IAAA,iBAAA,GAAA,mBAAA,EAAA,QACA,EAAA,IAAA,EAAA,IAAA,EAAA,IACA,OAAA,EAAA,OAEA,IAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,GAAA,EACA,OAAA,EAAA,KAEA,GAAA,EAAA,GACA,OAAA,EAAA,GAAA,OAEA,IAAA,IAAA,KAAA,EACA,GAAA,EAAA,KAAA,EAAA,GACA,OAAA,EAGA,OAAA,EAGA,OAAA,QAAA;;AC5EA,IAAA,EAAA,QAAA,cAMA,EAAA,sBACA,EAAA,OAAA,EAAA,QAiBA,SAAA,EAAA,GAEA,OADA,EAAA,EAAA,KACA,EAAA,KAAA,GACA,EAAA,QAAA,EAAA,QACA,EAGA,OAAA,QAAA;;AC/BA,aAEAA,QAAQC,YAAa,EAErB,IAAI+G,EAAW/F,QAAQ,kBAEnBgG,EAAY9F,EAAuB6F,GAEnCE,EAAgBjG,QAAQ,uBAExBkG,EAAiBhG,EAAuB+F,GAExCxE,EAAczB,QAAQ,gBAEtB0B,EAAexB,EAAuBuB,GAE1C,SAASvB,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAI0F,EAAY,WAcHA,SAAAA,EAAU5C,GACfjD,EAAgB,KAAM6F,GAEjBC,KAAAA,iBAAmB,SACnBC,KAAAA,aAAe,uDACfC,KAAAA,eAAiB,yEAEjBC,KAAAA,oBAAsB,yBACtBC,KAAAA,mBAAqB,KAAKC,uBAAuBlD,EAAImD,kBAErDC,KAAAA,wBAA0B,KAAKC,wBAAwBrD,EAAIsD,uBAC3DC,KAAAA,uBAAyB,KAAKF,wBAAwBrD,EAAIwD,sBAC1DC,KAAAA,qBAAuB,KAAKJ,wBAAwBrD,EAAI0D,eAExDC,KAAAA,WAAa,KAAKC,gBAAgB5D,EAAI6D,kBACtCC,KAAAA,aAAe,KAAKC,kBAAkB/D,EAAIgE,aAE1CC,KAAAA,iBAAmB,KAAKC,iBAAiBlE,EAAImE,YAC7CC,KAAAA,kBAAoB,KAAKF,iBAAiBlE,EAAIqE,aAE9CC,KAAAA,0BAA4B,KAAKC,uBAAuBvE,EAAIwE,wBAAyB,UACrFC,KAAAA,8BAAgC,KAAKF,uBAAuBvE,EAAI0E,sBAAuB,mBACvFC,KAAAA,+BAAiC,KAAKJ,uBAAuBvE,EAAI0E,sBAAuB,KAAKE,oBAAoB5E,EAAIgE,cAkSvHpB,OA/RPA,EAAUpF,UAAU0F,uBAAyB,SAAgCC,GAClE,OAAA,IAAI0B,OAAO,QAAU1B,EAAiB2B,IAAI,SAAUC,GAChD,OAAA,EAAIpC,EAAc,SAAaoC,KACvCC,KAAK,KAAO,kBAGnBpC,EAAUpF,UAAU6F,wBAA0B,SAAiCK,GACvEuB,IAAAA,EAAuBvB,EAAcsB,KAAK,KAAKpD,QAAQ,KAAM,QAC1D,OAAA,IAAIiD,OAAO,KAAOI,EAAuB,OAAQ,MAG5DrC,EAAUpF,UAAUoG,gBAAkB,WAC9BsB,IAAAA,EAAe5C,UAAU5E,OAAS,QAAsB6E,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,GAEhF,OAAA,IAAIuC,OAAO,SAAWK,EAAaF,KAAK,IAAM,QAGzDpC,EAAUpF,UAAUuG,kBAAoB,SAA2BC,GACxD,OAAA,IAAIa,OAAO,KAAO,KAAKD,oBAAoBZ,GAAe,MAWrEpB,EAAUpF,UAAUoH,oBAAsB,SAA6BZ,GAC/DmB,IAAAA,EAAW,CACL,KAAA,mBACA,KAAA,4CACE,KAAA,0CACF,KAAA,0CACC,MAAA,8CAGJnB,OAAAA,EAAYc,IAAI,SAAUM,GACtBD,OAAAA,EAASC,KACjBJ,KAAK,MAGZpC,EAAUpF,UAAU0G,iBAAmB,SAA0BmB,GACzD1E,IAAAA,EAAQ,KAEL,OAAA,IAAIkE,OAAO,KAAOQ,EAAOP,IAAI,SAAUQ,GACnC3E,OAAAA,EAAM4E,YAAYD,KAC1BN,KAAK,KAAO,IAAK,MAGxBpC,EAAUpF,UAAU+H,YAAc,SAAqBC,GAC/CA,MAAS,SAATA,GAA8B,SAATA,EACdA,EAGU,IAAjBA,EAAM9H,QAEC,EAAIiF,EAAc,SAAa6C,GAG/B,MAAQA,EAAQ,OAI/B5C,EAAUpF,UAAU+G,uBAAyB,SAAgCkB,EAAOC,GAC5E,IAAA,EAAIjD,EAAS,SAAagD,GACnB,OAAA,EAEPE,IAAAA,EAAaF,EAAMX,IAAInC,EAAc,SAAaqC,KAAK,KAEpD,OAAA,IAAIH,OAAO,QAAUc,EAAa,OAASD,EAAU,OAchE9C,EAAUpF,UAAUgD,SAAW,SAAkBoF,GAKtCA,IAJHpH,IAAAA,EAAS,GACTM,OAAQ,EAGL8G,EAAMlI,QAEToB,EAAQ,KAAK+G,aAAaD,EAAO9G,GAEjC8G,EAAQA,EAAME,UAAUhH,EAAMC,MAAMrB,QAEpCc,EAAOZ,KAAKkB,GAETN,OAAAA,GAGXoE,EAAUpF,UAAUqI,aAAe,SAAsBD,EAAO5D,GACrD,OAAA,KAAK+D,mBAAmBH,IAAU,KAAKI,gBAAgBJ,IAAU,KAAKK,eAAeL,IAAU,KAAKM,kBAAkBN,IAAU,KAAKO,mBAAmBP,IAAU,KAAKQ,oBAAoBR,IAAU,KAAKS,eAAeT,IAAU,KAAKU,qBAAqBV,EAAO5D,IAAkB,KAAKuE,aAAaX,IAAU,KAAKY,iBAAiBZ,IAGnVhD,EAAUpF,UAAUuI,mBAAqB,SAA4BH,GAC1D,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYzC,WAC9BgL,MAAO,KAAK7D,oBAIpBD,EAAUpF,UAAUwI,gBAAkB,SAAyBJ,GACpD,OAAA,KAAKe,oBAAoBf,IAAU,KAAKgB,qBAAqBhB,IAGxEhD,EAAUpF,UAAUmJ,oBAAsB,SAA6Bf,GAC5D,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYhC,aAC9BuK,MAAO,KAAKzD,sBAIpBL,EAAUpF,UAAUoJ,qBAAuB,SAA8BhB,GAC9D,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAY/B,cAC9BsK,MAAO,KAAK1D,uBAIpBJ,EAAUpF,UAAUyI,eAAiB,SAAwBL,GAClD,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYvC,OAC9B8K,MAAO,KAAK5C,gBAIpBlB,EAAUpF,UAAU0I,kBAAoB,SAA2BN,GACxD,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYlC,WAC9ByK,MAAO,KAAKzC,oBAIpBrB,EAAUpF,UAAU2I,mBAAqB,SAA4BP,GAC1D,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYjC,YAC9BwK,MAAO,KAAKtC,qBAIpBxB,EAAUpF,UAAU4I,oBAAsB,SAA6BR,GAC5D,OAAA,KAAKiB,8BAA8BjB,IAAU,KAAKkB,+BAA+BlB,IAAU,KAAKmB,2BAA2BnB,IAGtIhD,EAAUpF,UAAUqJ,8BAAgC,SAAuCjB,GAChF,OAAA,KAAKoB,2BAA2B,CACnCpB,MAAOA,EACPc,MAAO,KAAKjC,8BACZwC,SAAU,SAAkBC,GACjBA,OAAAA,EAAEC,MAAM,OAK3BvE,EAAUpF,UAAUsJ,+BAAiC,SAAwClB,GACrFwB,IAAAA,EAAS,KAEN,OAAA,KAAKJ,2BAA2B,CACnCpB,MAAOA,EACPc,MAAO,KAAK/B,+BACZsC,SAAU,SAAkBC,GACjBE,OAAAA,EAAOC,yBAAyB,CAAE/H,IAAK4H,EAAEC,MAAM,GAAI,GAAIG,UAAWJ,EAAEC,OAAO,SAK9FvE,EAAUpF,UAAUuJ,2BAA6B,SAAoCnB,GAC1E,OAAA,KAAKoB,2BAA2B,CACnCpB,MAAOA,EACPc,MAAO,KAAKpC,0BACZ2C,SAAU,SAAkBC,GACjBA,OAAAA,EAAEC,MAAM,OAK3BvE,EAAUpF,UAAUwJ,2BAA6B,SAAoC/H,GAC7E2G,IAAAA,EAAQ3G,EAAK2G,MACbc,EAAQzH,EAAKyH,MACbO,EAAWhI,EAAKgI,SAEhBnI,EAAQ,KAAK2H,qBAAqB,CAAEb,MAAOA,EAAOc,MAAOA,EAAOzI,KAAME,EAAY,QAAY7B,cAI3FwC,OAHHA,IACAA,EAAMQ,IAAM2H,EAASnI,EAAMC,QAExBD,GAGX8D,EAAUpF,UAAU6J,yBAA2B,SAAkCE,GACzEjI,IAAAA,EAAMiI,EAAMjI,IACZgI,EAAYC,EAAMD,UAEfhI,OAAAA,EAAIsC,QAAQ,IAAIiD,QAAO,EAAIlC,EAAc,SAAa,MAAQ2E,EAAW,KAAMA,IAM1F1E,EAAUpF,UAAU6I,eAAiB,SAAwBT,GAClD,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAY9B,OAC9BqK,MAAO,KAAK5D,gBAOpBF,EAAUpF,UAAUgJ,iBAAmB,SAA0BZ,GACtD,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYnC,SAC9B0K,MAAO,KAAK3D,kBAIpBH,EAAUpF,UAAU8I,qBAAuB,SAA8BV,EAAO5D,GAGxEA,IAAAA,IAAiBA,EAAcjD,OAAiC,MAAxBiD,EAAcjD,MAGnD,OAAA,KAAKyI,yBAAyB5B,IAAU,KAAK6B,wBAAwB7B,IAAU,KAAK8B,sBAAsB9B,IAGrHhD,EAAUpF,UAAUgK,yBAA2B,SAAkC5B,GACtE,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYrC,kBAC9B4K,MAAO,KAAKtD,2BAIpBR,EAAUpF,UAAUiK,wBAA0B,SAAiC7B,GACpE,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYpC,iBAC9B2K,MAAO,KAAKnD,0BAIpBX,EAAUpF,UAAUkK,sBAAwB,SAA+B9B,GAChE,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYtC,SAC9B6K,MAAO,KAAKjD,wBAIpBb,EAAUpF,UAAU+I,aAAe,SAAsBX,GAC9C,OAAA,KAAKa,qBAAqB,CAC7Bb,MAAOA,EACP3H,KAAME,EAAY,QAAYxC,KAC9B+K,MAAO,KAAK/C,cAIpBf,EAAUpF,UAAUiJ,qBAAuB,SAA8BkB,GACjE/B,IAAAA,EAAQ+B,EAAM/B,MACd3H,EAAO0J,EAAM1J,KACbyI,EAAQiB,EAAMjB,MAEdkB,EAAUhC,EAAMiC,MAAMnB,GAEtBkB,GAAAA,EACO,MAAA,CAAE3J,KAAMA,EAAMc,MAAO6I,EAAQ,KAIrChF,EAtUK,GAyUhBpH,QAAO,QAAcoH,EACrBrG,OAAOf,QAAUA,QAAO;;AC9VxB,aAEAA,QAAQC,YAAa,EAErB,IAAIqM,EAAarL,QAAQ,qBAErBsL,EAAcpL,EAAuBmL,GAErCE,EAAavL,QAAQ,qBAErBwL,EAActL,EAAuBqL,GAEzC,SAASrL,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAIwG,EAAgB,CAAC,MAAO,WAAY,QAAS,MAAO,WAAY,QAAS,QAAS,MAAO,MAAO,QAAS,KAAM,MAAO,aAAc,YAAa,UAAW,aAAc,KAAM,SAAU,aAAc,QAAS,gBAAiB,MAAO,YAAa,MAAO,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAAW,OAAQ,aAAc,KAAM,QAAS,OAAQ,SAAU,UAAW,cAAe,WAAY,OAAQ,OAAQ,QAAS,OAAQ,UAAW,OAAQ,YAAa,mBAAoB,cAAe,QAAS,OAAQ,QAAS,QAAS,UAAW,WAAY,UAAW,UAAW,aAAc,SAAU,SAAU,UAAW,SAAU,SAAU,YAAa,UAAW,aAAc,aAAc,WAAY,WAAY,UAAW,OAAQ,gBAAiB,QAAS,YAAa,YAAa,aAAc,SAAU,QAAS,OAAQ,YAAa,UAAW,eAAgB,kCAAmC,mBAAoB,eAAgB,eAAgB,iBAAkB,iBAAkB,eAAgB,oBAAqB,mBAAoB,mCAAoC,eAAgB,SAAU,QAAS,OAAQ,WAAY,oBAAqB,mBAAoB,OAAQ,MAAO,OAAQ,aAAc,WAAY,SAAU,SAAU,kBAAmB,iBAAkB,aAAc,MAAO,UAAW,UAAW,UAAW,WAAY,aAAc,SAAU,YAAa,aAAc,QAAS,WAAY,aAAc,gBAAiB,cAAe,UAAW,WAAY,aAAc,WAAY,KAAM,WAAY,SAAU,OAAQ,SAAU,UAAW,OAAQ,WAAY,UAAW,OAAQ,SAAU,SAAU,WAAY,aAAc,MAAO,WAAY,SAAU,QAAS,SAAU,QAAS,YAAa,YAAa,YAAa,OAAQ,UAAW,SAAU,OAAQ,MAAO,UAAW,WAAY,WAAY,UAAW,QAAS,SAAU,QAAS,YAAa,OAAQ,SAAU,QAAS,QAAS,QAAS,QAAS,MAAO,UAAW,OAAQ,OAAQ,WAAY,SAAU,UAAW,YAAa,MAAO,SAAU,OAAQ,QAAS,UAAW,QAAS,WAAY,UAAW,OAAQ,eAAgB,OAAQ,OAAQ,OAAQ,QAAS,WAAY,KAAM,YAAa,KAAM,YAAa,YAAa,YAAa,QAAS,YAAa,aAAc,MAAO,WAAY,UAAW,QAAS,QAAS,cAAe,SAAU,MAAO,UAAW,YAAa,eAAgB,WAAY,OAAQ,KAAM,SAAU,YAAa,UAAW,MAAO,OAAQ,OAAQ,MAAO,QAAS,WAAY,QAAS,UAAW,WAAY,UAAW,QAAS,OAAQ,OAAQ,WAAY,KAAM,QAAS,YAAa,SAAU,YAAa,iBAAkB,UAAW,WAAY,OAAQ,UAAW,WAAY,OAAQ,OAAQ,QAAS,aAAc,QAAS,eAAgB,MAAO,WAAY,SAAU,QAAS,SAAU,cAAe,eAAgB,MAAO,SAAU,UAAW,WAAY,MAAO,OAAQ,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,WAAY,UAAW,QAAS,QAAS,MAAO,YAAa,UAAW,KAAM,UAAW,UAAW,WAAY,aAAc,aAAc,aAAc,OAAQ,UAAW,YAAa,aAAc,MAAO,OAAQ,SAAU,QAAS,UAAW,WAAY,OAAQ,eAAgB,KAAM,SAAU,MAAO,YAAa,KAAM,OAAQ,OAAQ,eAAgB,WAAY,SAAU,QAAS,MAAO,QAAS,OAAQ,WAAY,UAAW,aAAc,UAAW,SAAU,WAAY,YAAa,OAAQ,YAAa,cAAe,eAAgB,aAAc,WAAY,OAAQ,kBAAmB,kBAAmB,eAAgB,YAAa,OAAQ,WAAY,QAAS,YAAa,UAAW,UAAW,UAAW,SAAU,aAAc,YAAa,UAAW,OAAQ,SAAU,QAAS,UAAW,QAAS,OAAQ,OAAQ,QAAS,OAAQ,WAAY,YAAa,MAAO,aAAc,cAAe,UAAW,YAAa,YAAa,aAAc,iBAAkB,UAAW,aAAc,WAAY,WAAY,WAAY,UAAW,SAAU,SAAU,QAAS,WAAY,UAAW,WAAY,SAAU,qBAAsB,SAAU,UAAW,SAAU,QAAS,OAAQ,WAAY,SAAU,gBAAiB,aAAc,cAAe,kBAAmB,kBAAmB,gBAAiB,WAAY,UAAW,MAAO,YAAa,OAAQ,SAAU,aAAc,MAAO,MAAO,YAAa,SAAU,QAAS,aAAc,SAAU,SAAU,SAAU,UAAW,SAAU,WAAY,YAAa,WAAY,UAAW,eAAgB,SAAU,UAAW,SAAU,WAAY,OAAQ,OAAQ,SAAU,WAAY,eAAgB,MAAO,eAAgB,QAAS,WAAY,aAAc,OAAQ,UAAW,WAAY,QAAS,WAAY,YAAa,SAAU,WAAY,OAAQ,aAAc,cAAe,WAAY,SAAU,QAAS,cAAe,YAAa,MAAO,UAAW,YAAa,UAAW,SAAU,SAAU,UAAW,SAAU,cAAe,QAAS,cAAe,aAAc,OAAQ,OAAQ,YAAa,gBAAiB,kBAAmB,KAAM,WAAY,cAAe,YAAa,cAAe,QAAS,UAAW,OAAQ,OAAQ,WAAY,OAAQ,UAAW,OAAQ,SAAU,UAAW,SAAU,QAAS,QAAS,QAAS,OAAQ,QAAS,YAAa,QAAS,UAAW,WAAY,UAAW,UAAW,UAAW,WAAY,OAAQ,UAAW,OAAQ,WAAY,UAAW,OAAQ,WAAY,QAAS,eAAgB,SAAU,OAAQ,SAAU,UAAW,MAAO,QAAS,aAAc,YAAa,gBAAiB,OAAQ,SAEt9KJ,EAAwB,CAAC,MAAO,QAAS,eAAgB,cAAe,cAAe,SAAU,cAAe,OAAQ,WAAY,KAAM,SAAU,cAAe,YAAa,QAAS,WAAY,SAAU,qBAAsB,aAAc,MAAO,YAAa,SAAU,SAAU,SAE3RE,EAAuB,CAAC,MAAO,aAAc,aAAc,OAAQ,YAAa,kBAAmB,KAAM,aAAc,aAAc,oBAErIvD,OAAY,EAEZiI,EAAe,WAINA,SAAAA,EAAalI,GAClBjD,EAAgB,KAAMmL,GAEjBlI,KAAAA,IAAMA,EA6BRkI,OAlBPA,EAAa1K,UAAU6C,OAAS,SAAgBC,GAerC,OAdFL,IACDA,EAAY,IAAIgI,EAAW,QAAY,CACnCvE,cAAeA,EACfJ,sBAAuBA,EACvBE,qBAAsBA,EACtBQ,YAAa,CAAC,KAAQ,KAAM,KAAM,MAClCG,WAAY,CAAC,KACbE,YAAa,CAAC,KACdG,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,KACxBvB,iBAAkB,CAAC,MACnBU,iBAAkB,CAAC,IAAK,QAGzB,IAAIkE,EAAW,QAAY,KAAK/H,IAAKC,GAAWI,OAAOC,IAG3D4H,EApCQ,GAuCnB1M,QAAO,QAAc0M,EACrB3L,OAAOf,QAAUA,QAAO;;AChExB,aAEAA,QAAQC,YAAa,EAErB,IAAIqM,EAAarL,QAAQ,qBAErBsL,EAAcpL,EAAuBmL,GAErCE,EAAavL,QAAQ,qBAErBwL,EAActL,EAAuBqL,GAEzC,SAASrL,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAIwG,EAAgB,CAAC,MAAO,QAAS,UAAW,MAAO,MAAO,QAAS,KAAM,MAAO,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,QAAS,KAAM,OAAQ,OAAQ,OAAQ,UAAW,UAAW,aAAc,SAAU,UAAW,WAAY,YAAa,QAAS,SAAU,WAAY,UAAW,YAAa,UAAW,YAAa,SAAU,UAAW,OAAQ,WAAY,WAAY,KAAM,OAAQ,OAAQ,UAAW,OAAQ,MAAO,QAAS,SAAU,UAAW,UAAW,SAAU,UAAW,QAAS,QAAS,QAAS,UAAW,MAAO,QAAS,OAAQ,WAAY,QAAS,QAAS,MAAO,SAAU,KAAM,SAAU,QAAS,KAAM,UAAW,YAAa,QAAS,QAAS,SAAU,QAAS,SAAU,YAAa,OAAQ,KAAM,OAAQ,MAAO,OAAQ,WAAY,QAAS,OAAQ,OAAQ,MAAO,UAAW,OAAQ,QAAS,MAAO,MAAO,UAAW,UAAW,eAAgB,QAAS,QAAS,UAAW,YAAa,OAAQ,MAAO,OAAQ,SAAU,SAAU,SAAU,KAAM,SAAU,KAAM,QAAS,QAAS,OAAQ,QAAS,YAAa,WAAY,OAAQ,OAAQ,UAAW,UAAW,UAAW,YAAa,YAAa,SAAU,MAAO,QAAS,SAAU,SAAU,SAAU,YAAa,SAAU,QAAS,OAAQ,WAAY,YAAa,SAAU,SAAU,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,QAAS,aAAc,SAAU,SAAU,OAAQ,KAAM,cAAe,UAAW,OAAQ,WAAY,QAAS,QAAS,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,MAAO,OAAQ,QAAS,WAAY,QAAS,SAAU,SAAU,MAAO,OAAQ,OAAQ,QAAS,QAAS,OAAQ,SAAU,OAAQ,OAEjmDJ,EAAwB,CAAC,cAAe,aAAc,SAAU,sBAAuB,iBAAkB,iBAAkB,OAAQ,WAAY,SAAU,QAAS,cAAe,gBAAiB,YAAa,MAAO,QAAS,QAAS,OAAQ,WAAY,UAAW,SAAU,qBAAsB,aAAc,MAAO,YAAa,QAAS,SAAU,SAAU,SAAU,WAAY,SAAU,SAEtYE,EAAuB,CAAC,MAAO,aAAc,OAAQ,YAAa,kBAAmB,KAAM,aAAc,aAAc,mBAAoB,OAE3IvD,OAAY,EAEZkI,EAAgB,WAIPA,SAAAA,EAAcnI,GACnBjD,EAAgB,KAAMoL,GAEjBnI,KAAAA,IAAMA,EA2BRmI,OAhBPA,EAAc3K,UAAU6C,OAAS,SAAgBC,GAatC,OAZFL,IACDA,EAAY,IAAIgI,EAAW,QAAY,CACnCvE,cAAeA,EACfJ,sBAAuBA,EACvBE,qBAAsBA,EACtBQ,YAAa,CAAC,KAAQ,KAAM,MAC5BG,WAAY,CAAC,IAAK,IAAK,KACvBE,YAAa,CAAC,IAAK,IAAK,KACxBK,sBAAuB,CAAC,KACxBvB,iBAAkB,CAAC,IAAK,SAGzB,IAAI4E,EAAW,QAAY,KAAK/H,IAAKC,GAAWI,OAAOC,IAG3D6H,EAlCS,GAqCpB3M,QAAO,QAAc2M,EACrB5L,OAAOf,QAAUA,QAAO;;AC9DxB,aAEAA,QAAQC,YAAa,EAErB,IAAIqM,EAAarL,QAAQ,qBAErBsL,EAAcpL,EAAuBmL,GAErCE,EAAavL,QAAQ,qBAErBwL,EAActL,EAAuBqL,GAEzC,SAASrL,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAIwG,EAAgB,CAAC,IAAK,aAAc,QAAS,YAAa,MAAO,QAAS,MAAO,QAAS,KAAM,MAAO,KAAM,YAAa,SAAU,MAAO,UAAW,aAAc,iBAAkB,SAAU,YAAa,QAAS,OAAQ,UAAW,OAAQ,QAAS,OAAQ,KAAM,OAAQ,IAAK,OAAQ,UAAW,UAAW,OAAQ,YAAa,OAAQ,YAAa,UAAW,cAAe,YAAa,QAAS,YAAa,QAAS,QAAS,UAAW,WAAY,WAAY,UAAW,UAAW,UAAW,UAAW,SAAU,YAAa,WAAY,WAAY,UAAW,WAAY,cAAe,UAAW,WAAY,UAAW,QAAS,QAAS,SAAU,aAAc,UAAW,UAAW,SAAU,cAAe,WAAY,OAAQ,YAAa,OAAQ,MAAO,UAAW,UAAW,SAAU,SAAU,OAAQ,gBAAiB,YAAa,WAAY,KAAM,SAAU,OAAQ,WAAY,UAAW,QAAS,QAAS,SAAU,aAAc,YAAa,UAAW,SAAU,OAAQ,UAAW,WAAY,UAAW,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,MAAO,SAAU,QAAS,OAAQ,WAAY,UAAW,OAAQ,QAAS,QAAS,OAAQ,OAAQ,SAAU,OAAQ,aAAc,KAAM,YAAa,KAAM,YAAa,QAAS,UAAW,YAAa,UAAW,WAAY,eAAgB,MAAO,UAAW,YAAa,WAAY,OAAQ,aAAc,KAAM,YAAa,OAAQ,WAAY,QAAS,UAAW,SAAU,QAAS,UAAW,OAAQ,QAAS,QAAS,QAAS,UAAW,QAAS,OAAQ,OAAQ,MAAO,MAAO,SAAU,SAAU,QAAS,MAAO,QAAS,SAAU,WAAY,MAAO,OAAQ,QAAS,WAAY,OAAQ,MAAO,WAAY,SAAU,UAAW,WAAY,QAAS,MAAO,UAAW,aAAc,SAAU,MAAO,SAAU,OAAQ,SAAU,cAAe,SAAU,SAAU,UAAW,UAAW,cAAe,cAAe,cAAe,gBAAiB,YAAa,SAAU,SAAU,eAAgB,WAAY,YAAa,UAAW,KAAM,MAAO,KAAM,OAAQ,SAAU,OAAQ,WAAY,SAAU,SAAU,UAAW,QAAS,eAAgB,SAAU,UAAW,SAAU,MAAO,WAAY,aAAc,UAAW,kBAAmB,YAAa,aAAc,SAAU,YAAa,SAAU,UAAW,OAAQ,YAAa,cAAe,YAAa,WAAY,YAAa,SAAU,YAAa,QAAS,UAAW,YAAa,SAAU,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,MAAO,YAAa,UAAW,YAAa,MAAO,YAAa,SAAU,WAAY,eAAgB,SAAU,SAAU,YAAa,UAAW,SAAU,WAAY,MAAO,QAAS,SAAU,UAAW,SAAU,OAAQ,YAAa,MAAO,MAAO,MAAO,SAAU,UAAW,OAAQ,WAAY,WAAY,eAAgB,QAAS,QAAS,SAAU,OAAQ,WAAY,OAAQ,QAAS,SAAU,MAAO,UAAW,UAAW,UAAW,UAAW,WAAY,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,cAAe,eAAgB,gBAAiB,UAAW,aAAc,MAAO,UAAW,UAAW,UAAW,QAAS,MAAO,MAAO,OAAQ,OAAQ,YAAa,gBAAiB,gBAAiB,kBAAmB,kBAAmB,KAAM,WAAY,cAAe,gBAAiB,UAAW,OAAQ,UAAW,OAAQ,MAAO,MAAO,MAAO,MAAO,QAAS,SAAU,SAAU,WAAY,YAAa,MAAO,OAAQ,QAAS,WAAY,SAAU,QAAS,UAAW,WAAY,WAAY,WAAY,SAAU,UAAW,OAAQ,QAAS,OAAQ,WAAY,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,QAExjHJ,EAAwB,CAAC,MAAO,eAAgB,cAAe,QAAS,aAAc,UAAW,cAAe,SAAU,MAAO,SAAU,YAAa,cAAe,OAAQ,WAAY,SAAU,cAAe,SAAU,YAAa,QAAS,OAAQ,SAAU,WAAY,SAAU,qBAAsB,aAAc,MAAO,aAAc,YAAa,QAAS,SAAU,SAAU,SAE/XE,EAAuB,CAAC,MAAO,cAAe,aAAc,OAAQ,MAAO,aAAc,OAAQ,YAAa,kBAAmB,KAAM,cAAe,aAAc,aAAc,mBAAoB,OAAQ,OAE9MvD,OAAY,EAEZmI,EAAiB,WAIRA,SAAAA,EAAepI,GACpBjD,EAAgB,KAAMqL,GAEjBpI,KAAAA,IAAMA,EA6BRoI,OAlBPA,EAAe5K,UAAU6C,OAAS,SAAgBC,GAevC,OAdFL,IACDA,EAAY,IAAIgI,EAAW,QAAY,CACnCvE,cAAeA,EACfJ,sBAAuBA,EACvBE,qBAAsBA,EACtBQ,YAAa,CAAC,KAAQ,MAAO,KAAM,MACnCG,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBG,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,KACxBvB,iBAAkB,CAAC,MACnBU,iBAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,QAGxC,IAAIkE,EAAW,QAAY,KAAK/H,IAAKC,GAAWI,OAAOC,IAG3D8H,EApCU,GAuCrB5M,QAAO,QAAc4M,EACrB7L,OAAOf,QAAUA,QAAO;;AChExB,aAEAA,QAAQC,YAAa,EAErB,IAAIqM,EAAarL,QAAQ,qBAErBsL,EAAcpL,EAAuBmL,GAErCE,EAAavL,QAAQ,qBAErBwL,EAActL,EAAuBqL,GAEzC,SAASrL,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzF,SAASC,EAAgBC,EAAUC,GAAmB,KAAED,aAAoBC,GAAsB,MAAA,IAAIC,UAAU,qCAEhH,IAAIwG,EAAgB,CAAC,aAAc,SAAU,UAAW,YAAa,YAAa,MAAO,QAAS,UAAW,UAAW,KAAM,MAAO,aAAc,iBAAkB,SAAU,QAAS,UAAW,SAAU,OAAQ,UAAW,OAAQ,SAAU,UAAW,gBAAiB,UAAW,QAAS,WAAY,UAAW,YAAa,SAAU,UAAW,UAAW,SAAU,YAAa,aAAc,aAAc,aAAc,WAAY,UAAW,SAAU,QAAS,oBAAqB,WAAY,YAAa,MAAO,WAAY,aAAc,aAAc,UAAW,UAAW,UAAW,SAAU,OAAQ,WAAY,gBAAiB,WAAY,cAAe,MAAO,KAAM,OAAQ,WAAY,YAAa,UAAW,OAAQ,WAAY,MAAO,SAAU,UAAW,cAAe,SAAU,UAAW,SAAU,OAAQ,UAAW,SAAU,UAAW,WAAY,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAAS,MAAO,QAAS,UAAW,OAAQ,WAAY,WAAY,SAAU,QAAS,SAAU,eAAgB,OAAQ,gBAAiB,QAAS,OAAQ,cAAe,cAAe,aAAc,KAAM,SAAU,SAAU,KAAM,QAAS,UAAW,SAAU,SAAU,YAAa,gBAAiB,WAAY,OAAQ,UAAW,KAAM,YAAa,MAAO,OAAQ,OAAQ,iBAAkB,UAAW,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,eAAgB,QAAS,SAAU,uBAAwB,cAAe,kBAAmB,QAAS,2BAA4B,uBAAwB,WAAY,uBAAwB,uBAAwB,SAAU,QAAS,SAAU,gBAAiB,WAAY,OAAQ,SAAU,QAAS,aAAc,SAAU,QAAS,UAAW,MAAO,QAAS,OAAQ,SAAU,YAAa,YAAa,KAAM,OAAQ,OAAQ,WAAY,SAAU,aAAc,UAAW,YAAa,OAAQ,UAAW,YAAa,aAAc,WAAY,UAAW,aAAc,YAAa,UAAW,cAAe,QAAS,QAAS,QAAS,cAAe,iBAAkB,YAAa,QAAS,OAAQ,YAAa,aAAc,aAAc,SAAU,SAAU,SAAU,SAAU,aAAc,UAAW,cAAe,QAAS,UAAW,WAAY,SAAU,UAAW,SAAU,QAAS,WAAY,MAAO,OAAQ,aAAc,SAAU,WAAY,YAAa,eAAgB,UAAW,QAAS,OAAQ,WAAY,QAAS,SAAU,SAAU,MAAO,mBAAoB,iBAAkB,kBAAmB,iBAAkB,oBAAqB,YAAa,sBAAuB,cAAe,cAAe,iBAAkB,2BAA4B,oBAAqB,eAAgB,wBAAyB,mBAAoB,mBAAoB,yBAA0B,mBAAoB,eAAgB,QAAS,WAAY,SAAU,OAAQ,UAAW,gBAAiB,SAAU,UAAW,QAAS,QAAS,SAAU,YAAa,aAAc,OAAQ,KAAM,WAAY,gBAAiB,OAAQ,WAAY,OAAQ,QAAS,cAAe,SAAU,SAAU,WAAY,QAAS,MAAO,QAAS,YAAa,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,cAEzmGJ,EAAwB,CAAC,MAAO,QAAS,eAAgB,cAAe,cAAe,SAAU,cAAe,OAAQ,WAAY,KAAM,SAAU,cAAe,SAAU,YAAa,QAAS,SAAU,WAAY,SAAU,qBAAsB,aAAc,MAAO,YAAa,QAAS,SAAU,SAAU,SAExTE,EAAuB,CAAC,MAAO,cAAe,aAAc,OAAQ,aAAc,OAAQ,YAAa,kBAAmB,KAAM,cAAe,aAAc,aAAc,mBAAoB,OAAQ,OAEvMvD,OAAY,EAEZoI,EAAuB,WAIdA,SAAAA,EAAqBrI,GAC1BjD,EAAgB,KAAMsL,GAEjBrI,KAAAA,IAAMA,EA4BRqI,OAjBPA,EAAqB7K,UAAU6C,OAAS,SAAgBC,GAc7C,OAbFL,IACDA,EAAY,IAAIgI,EAAW,QAAY,CACnCvE,cAAeA,EACfJ,sBAAuBA,EACvBE,qBAAsBA,EACtBQ,YAAa,CAAC,KAAQ,MAAO,KAAM,KAAM,MACzCG,WAAY,CAAC,IAAK,OAAQ,SAC1BE,YAAa,CAAC,IAAK,MAAO,SAC1BG,wBAAyB,GACzBE,sBAAuB,CAAC,IAAK,IAAK,KAClCvB,iBAAkB,CAAC,IAAK,SAGzB,IAAI4E,EAAW,QAAY,KAAK/H,IAAKC,GAAWI,OAAOC,IAG3D+H,EAnCgB,GAsC3B7M,QAAO,QAAc6M,EACrB9L,OAAOf,QAAUA,QAAO;;AC/DxB,aAEAA,QAAQC,YAAa,EAErB,IAAI6M,EAAgB7L,QAAQ,4BAExB8L,EAAiB5L,EAAuB2L,GAExCE,EAAiB/L,QAAQ,6BAEzBgM,EAAkB9L,EAAuB6L,GAEzCE,EAAkBjM,QAAQ,8BAE1BkM,EAAmBhM,EAAuB+L,GAE1CE,EAAwBnM,QAAQ,oCAEhCoM,EAAyBlM,EAAuBiM,GAEpD,SAASjM,EAAuBG,GAAcA,OAAAA,GAAOA,EAAIrB,WAAaqB,EAAM,CAAaA,QAAAA,GAEzFtB,QAAO,QAAc,CAWjB6E,OAAQ,SAAgBC,EAAON,GAGnBA,QAFRA,EAAMA,GAAO,IAED8I,UACH,IAAA,MACM,OAAA,IAAIP,EAAc,QAAYvI,GAAKK,OAAOC,GAChD,IAAA,OACM,OAAA,IAAImI,EAAe,QAAYzI,GAAKK,OAAOC,GACjD,IAAA,SACM,OAAA,IAAIqI,EAAgB,QAAY3I,GAAKK,OAAOC,GAClD,IAAA,MACAiC,UAAAA,EACM,OAAA,IAAIsG,EAAsB,QAAY7I,GAAKK,OAAOC,GAC7D,QACUyI,MAAAA,MAAM,4BAA8B/I,EAAI8I,aAI9DvM,OAAOf,QAAUA,QAAO;;ACnDxB,IAAMwN,EAAevM,QAAQ,oBAE7BwM,cAAgB,WACNC,IAAAA,EAAMC,SAASC,eAAe,OAAOrK,MAE3CoK,SAASC,eAAe,OAAOrK,MAAQiK,EAAa3I,OAAO6I","file":"script.66b11b0e.js","sourceRoot":"..\\www-src","sourcesContent":["/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsEndIndex;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimEnd = /\\s+$/;\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimEnd, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n","\"use strict\";\n\nexports.__esModule = true;\n/**\r\n * Constants for token types\r\n */\nexports[\"default\"] = {\n    WHITESPACE: \"whitespace\",\n    WORD: \"word\",\n    STRING: \"string\",\n    RESERVED: \"reserved\",\n    RESERVED_TOPLEVEL: \"reserved-toplevel\",\n    RESERVED_NEWLINE: \"reserved-newline\",\n    OPERATOR: \"operator\",\n    OPEN_PAREN: \"open-paren\",\n    CLOSE_PAREN: \"close-paren\",\n    LINE_COMMENT: \"line-comment\",\n    BLOCK_COMMENT: \"block-comment\",\n    NUMBER: \"number\",\n    PLACEHOLDER: \"placeholder\"\n};\nmodule.exports = exports[\"default\"];","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor;\n\n/**\n * The base implementation of `_.repeat` which doesn't coerce arguments.\n *\n * @private\n * @param {string} string The string to repeat.\n * @param {number} n The number of times to repeat the string.\n * @returns {string} Returns the repeated string.\n */\nfunction baseRepeat(string, n) {\n  var result = '';\n  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n    return result;\n  }\n  // Leverage the exponentiation by squaring algorithm for a faster repeat.\n  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = nativeFloor(n / 2);\n    if (n) {\n      string += string;\n    }\n  } while (n);\n\n  return result;\n}\n\nmodule.exports = baseRepeat;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var baseRepeat = require('./_baseRepeat'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/**\n * Repeats the given string `n` times.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to repeat.\n * @param {number} [n=1] The number of times to repeat the string.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the repeated string.\n * @example\n *\n * _.repeat('*', 3);\n * // => '***'\n *\n * _.repeat('abc', 2);\n * // => 'abcabc'\n *\n * _.repeat('abc', 0);\n * // => ''\n */\nfunction repeat(string, n, guard) {\n  if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n    n = 1;\n  } else {\n    n = toInteger(n);\n  }\n  return baseRepeat(toString(string), n);\n}\n\nmodule.exports = repeat;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _repeat = require(\"lodash/repeat\");\n\nvar _repeat2 = _interopRequireDefault(_repeat);\n\nvar _last = require(\"lodash/last\");\n\nvar _last2 = _interopRequireDefault(_last);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar INDENT_TYPE_TOP_LEVEL = \"top-level\";\nvar INDENT_TYPE_BLOCK_LEVEL = \"block-level\";\n\n/**\r\n * Manages indentation levels.\r\n *\r\n * There are two types of indentation levels:\r\n *\r\n * - BLOCK_LEVEL : increased by open-parenthesis\r\n * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words\r\n */\n\nvar Indentation = function () {\n    /**\r\n     * @param {String} indent Indent value, default is \"  \" (2 spaces)\r\n     */\n    function Indentation(indent) {\n        _classCallCheck(this, Indentation);\n\n        this.indent = indent || \"  \";\n        this.indentTypes = [];\n    }\n\n    /**\r\n     * Returns current indentation string.\r\n     * @return {String}\r\n     */\n\n\n    Indentation.prototype.getIndent = function getIndent() {\n        return (0, _repeat2[\"default\"])(this.indent, this.indentTypes.length);\n    };\n\n    /**\r\n     * Increases indentation by one top-level indent.\r\n     */\n\n\n    Indentation.prototype.increaseToplevel = function increaseToplevel() {\n        this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n    };\n\n    /**\r\n     * Increases indentation by one block-level indent.\r\n     */\n\n\n    Indentation.prototype.increaseBlockLevel = function increaseBlockLevel() {\n        this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n    };\n\n    /**\r\n     * Decreases indentation by one top-level indent.\r\n     * Does nothing when the previous indent is not top-level.\r\n     */\n\n\n    Indentation.prototype.decreaseTopLevel = function decreaseTopLevel() {\n        if ((0, _last2[\"default\"])(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n            this.indentTypes.pop();\n        }\n    };\n\n    /**\r\n     * Decreases indentation by one block-level indent.\r\n     * If there are top-level indents within the block-level indent,\r\n     * throws away these as well.\r\n     */\n\n\n    Indentation.prototype.decreaseBlockLevel = function decreaseBlockLevel() {\n        while (this.indentTypes.length > 0) {\n            var type = this.indentTypes.pop();\n            if (type !== INDENT_TYPE_TOP_LEVEL) {\n                break;\n            }\n        }\n    };\n\n    return Indentation;\n}();\n\nexports[\"default\"] = Indentation;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar INLINE_MAX_LENGTH = 50;\n\n/**\r\n * Bookkeeper for inline blocks.\r\n *\r\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\r\n * These blocks are formatted on a single line, unlike longer parenthized\r\n * expressions where open-parenthesis causes newline and increase of indentation.\r\n */\n\nvar InlineBlock = function () {\n    function InlineBlock() {\n        _classCallCheck(this, InlineBlock);\n\n        this.level = 0;\n    }\n\n    /**\r\n     * Begins inline block when lookahead through upcoming tokens determines\r\n     * that the block would be smaller than INLINE_MAX_LENGTH.\r\n     * @param  {Object[]} tokens Array of all tokens\r\n     * @param  {Number} index Current token position\r\n     */\n\n\n    InlineBlock.prototype.beginIfPossible = function beginIfPossible(tokens, index) {\n        if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n            this.level = 1;\n        } else if (this.level > 0) {\n            this.level++;\n        } else {\n            this.level = 0;\n        }\n    };\n\n    /**\r\n     * Finishes current inline block.\r\n     * There might be several nested ones.\r\n     */\n\n\n    InlineBlock.prototype.end = function end() {\n        this.level--;\n    };\n\n    /**\r\n     * True when inside an inline block\r\n     * @return {Boolean}\r\n     */\n\n\n    InlineBlock.prototype.isActive = function isActive() {\n        return this.level > 0;\n    };\n\n    // Check if this should be an inline parentheses block\n    // Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n\n\n    InlineBlock.prototype.isInlineBlock = function isInlineBlock(tokens, index) {\n        var length = 0;\n        var level = 0;\n\n        for (var i = index; i < tokens.length; i++) {\n            var token = tokens[i];\n            length += token.value.length;\n\n            // Overran max length\n            if (length > INLINE_MAX_LENGTH) {\n                return false;\n            }\n\n            if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n                level++;\n            } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n                level--;\n                if (level === 0) {\n                    return true;\n                }\n            }\n\n            if (this.isForbiddenToken(token)) {\n                return false;\n            }\n        }\n        return false;\n    };\n\n    // Reserved words that cause newlines, comments and semicolons\n    // are not allowed inside inline parentheses block\n\n\n    InlineBlock.prototype.isForbiddenToken = function isForbiddenToken(_ref) {\n        var type = _ref.type,\n            value = _ref.value;\n\n        return type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL || type === _tokenTypes2[\"default\"].RESERVED_NEWLINE || type === _tokenTypes2[\"default\"].COMMENT || type === _tokenTypes2[\"default\"].BLOCK_COMMENT || value === \";\";\n    };\n\n    return InlineBlock;\n}();\n\nexports[\"default\"] = InlineBlock;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Handles placeholder replacement with given params.\r\n */\nvar Params = function () {\n    /**\r\n     * @param {Object} params\r\n     */\n    function Params(params) {\n        _classCallCheck(this, Params);\n\n        this.params = params;\n        this.index = 0;\n    }\n\n    /**\r\n     * Returns param value that matches given placeholder with param key.\r\n     * @param {Object} token\r\n     *   @param {String} token.key Placeholder key\r\n     *   @param {String} token.value Placeholder value\r\n     * @return {String} param or token.value when params are missing\r\n     */\n\n\n    Params.prototype.get = function get(_ref) {\n        var key = _ref.key,\n            value = _ref.value;\n\n        if (!this.params) {\n            return value;\n        }\n        if (key) {\n            return this.params[key];\n        }\n        return this.params[this.index++];\n    };\n\n    return Params;\n}();\n\nexports[\"default\"] = Params;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _trimEnd = require(\"lodash/trimEnd\");\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nvar _Indentation = require(\"./Indentation\");\n\nvar _Indentation2 = _interopRequireDefault(_Indentation);\n\nvar _InlineBlock = require(\"./InlineBlock\");\n\nvar _InlineBlock2 = _interopRequireDefault(_InlineBlock);\n\nvar _Params = require(\"./Params\");\n\nvar _Params2 = _interopRequireDefault(_Params);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Formatter = function () {\n    /**\r\n     * @param {Object} cfg\r\n     *   @param {Object} cfg.indent\r\n     *   @param {Object} cfg.params\r\n     * @param {Tokenizer} tokenizer\r\n     */\n    function Formatter(cfg, tokenizer) {\n        _classCallCheck(this, Formatter);\n\n        this.cfg = cfg || {};\n        this.indentation = new _Indentation2[\"default\"](this.cfg.indent);\n        this.inlineBlock = new _InlineBlock2[\"default\"]();\n        this.params = new _Params2[\"default\"](this.cfg.params);\n        this.tokenizer = tokenizer;\n        this.previousReservedWord = {};\n        this.tokens = [];\n        this.index = 0;\n    }\n\n    /**\r\n     * Formats whitespaces in a SQL string to make it easier to read.\r\n     *\r\n     * @param {String} query The SQL query string\r\n     * @return {String} formatted query\r\n     */\n\n\n    Formatter.prototype.format = function format(query) {\n        this.tokens = this.tokenizer.tokenize(query);\n        var formattedQuery = this.getFormattedQueryFromTokens();\n\n        return formattedQuery.trim();\n    };\n\n    Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {\n        var _this = this;\n\n        var formattedQuery = \"\";\n\n        this.tokens.forEach(function (token, index) {\n            _this.index = index;\n\n            if (token.type === _tokenTypes2[\"default\"].WHITESPACE) {\n                // ignore (we do our own whitespace formatting)\n            } else if (token.type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n                formattedQuery = _this.formatLineComment(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].BLOCK_COMMENT) {\n                formattedQuery = _this.formatBlockComment(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL) {\n                formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED_NEWLINE) {\n                formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED) {\n                formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n                formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n                formattedQuery = _this.formatClosingParentheses(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].PLACEHOLDER) {\n                formattedQuery = _this.formatPlaceholder(token, formattedQuery);\n            } else if (token.value === \",\") {\n                formattedQuery = _this.formatComma(token, formattedQuery);\n            } else if (token.value === \":\") {\n                formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);\n            } else if (token.value === \".\") {\n                formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);\n            } else if (token.value === \";\") {\n                formattedQuery = _this.formatQuerySeparator(token, formattedQuery);\n            } else {\n                formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n            }\n        });\n        return formattedQuery;\n    };\n\n    Formatter.prototype.formatLineComment = function formatLineComment(token, query) {\n        return this.addNewline(query + token.value);\n    };\n\n    Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {\n        return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n    };\n\n    Formatter.prototype.indentComment = function indentComment(comment) {\n        return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n    };\n\n    Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {\n        this.indentation.decreaseTopLevel();\n\n        query = this.addNewline(query);\n\n        this.indentation.increaseToplevel();\n\n        query += this.equalizeWhitespace(token.value);\n        return this.addNewline(query);\n    };\n\n    Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {\n        return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n    };\n\n    // Replace any sequence of whitespace characters with single space\n\n\n    Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {\n        return string.replace(/\\s+/g, \" \");\n    };\n\n    // Opening parentheses increase the block indent level and start a new line\n\n\n    Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {\n        // Take out the preceding space unless there was whitespace there in the original query\n        // or another opening parens or line comment\n        var preserveWhitespaceFor = [_tokenTypes2[\"default\"].WHITESPACE, _tokenTypes2[\"default\"].OPEN_PAREN, _tokenTypes2[\"default\"].LINE_COMMENT];\n        if (!preserveWhitespaceFor.includes(this.previousToken().type)) {\n            query = (0, _trimEnd2[\"default\"])(query);\n        }\n        query += token.value;\n\n        this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n        if (!this.inlineBlock.isActive()) {\n            this.indentation.increaseBlockLevel();\n            query = this.addNewline(query);\n        }\n        return query;\n    };\n\n    // Closing parentheses decrease the block indent level\n\n\n    Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {\n        if (this.inlineBlock.isActive()) {\n            this.inlineBlock.end();\n            return this.formatWithSpaceAfter(token, query);\n        } else {\n            this.indentation.decreaseBlockLevel();\n            return this.formatWithSpaces(token, this.addNewline(query));\n        }\n    };\n\n    Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {\n        return query + this.params.get(token) + \" \";\n    };\n\n    // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n\n\n    Formatter.prototype.formatComma = function formatComma(token, query) {\n        query = this.trimTrailingWhitespace(query) + token.value + \" \";\n\n        if (this.inlineBlock.isActive()) {\n            return query;\n        } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n            return query;\n        } else {\n            return this.addNewline(query);\n        }\n    };\n\n    Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \" \";\n    };\n\n    Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value;\n    };\n\n    Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {\n        return query + token.value + \" \";\n    };\n\n    Formatter.prototype.formatQuerySeparator = function formatQuerySeparator(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \"\\n\";\n    };\n\n    Formatter.prototype.addNewline = function addNewline(query) {\n        return (0, _trimEnd2[\"default\"])(query) + \"\\n\" + this.indentation.getIndent();\n    };\n\n    Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {\n        if (this.previousNonWhitespaceToken().type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n            return (0, _trimEnd2[\"default\"])(query) + \"\\n\";\n        } else {\n            return (0, _trimEnd2[\"default\"])(query);\n        }\n    };\n\n    Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {\n        var n = 1;\n        while (this.previousToken(n).type === _tokenTypes2[\"default\"].WHITESPACE) {\n            n++;\n        }\n        return this.previousToken(n);\n    };\n\n    Formatter.prototype.previousToken = function previousToken() {\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        return this.tokens[this.index - offset] || {};\n    };\n\n    return Formatter;\n}();\n\nexports[\"default\"] = Formatter;\nmodule.exports = exports[\"default\"];","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var toString = require('./toString');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nmodule.exports = escapeRegExp;\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _isEmpty = require(\"lodash/isEmpty\");\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _escapeRegExp = require(\"lodash/escapeRegExp\");\n\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Tokenizer = function () {\n    /**\n     * @param {Object} cfg\n     *  @param {String[]} cfg.reservedWords Reserved words in SQL\n     *  @param {String[]} cfg.reservedToplevelWords Words that are set to new line separately\n     *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n     *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n     *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n     *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n     *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n     *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n     *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n     *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n     */\n    function Tokenizer(cfg) {\n        _classCallCheck(this, Tokenizer);\n\n        this.WHITESPACE_REGEX = /^(\\s+)/;\n        this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n        this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n        this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n        this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n        this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(cfg.reservedToplevelWords);\n        this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(cfg.reservedNewlineWords);\n        this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n        this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n        this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n        this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n        this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n        this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.indexedPlaceholderTypes, \"[0-9]*\");\n        this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, \"[a-zA-Z0-9._$]+\");\n        this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, this.createStringPattern(cfg.stringTypes));\n    }\n\n    Tokenizer.prototype.createLineCommentRegex = function createLineCommentRegex(lineCommentTypes) {\n        return new RegExp(\"^((?:\" + lineCommentTypes.map(function (c) {\n            return (0, _escapeRegExp2[\"default\"])(c);\n        }).join(\"|\") + \").*?(?:\\n|$))\");\n    };\n\n    Tokenizer.prototype.createReservedWordRegex = function createReservedWordRegex(reservedWords) {\n        var reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n        return new RegExp(\"^(\" + reservedWordsPattern + \")\\\\b\", \"i\");\n    };\n\n    Tokenizer.prototype.createWordRegex = function createWordRegex() {\n        var specialChars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        return new RegExp(\"^([\\\\w\" + specialChars.join(\"\") + \"]+)\");\n    };\n\n    Tokenizer.prototype.createStringRegex = function createStringRegex(stringTypes) {\n        return new RegExp(\"^(\" + this.createStringPattern(stringTypes) + \")\");\n    };\n\n    // This enables the following string patterns:\n    // 1. backtick quoted string using `` to escape\n    // 2. square bracket quoted string (SQL Server) using ]] to escape\n    // 3. double quoted string using \"\" or \\\" to escape\n    // 4. single quoted string using '' or \\' to escape\n    // 5. national character quoted string using N'' or N\\' to escape\n\n\n    Tokenizer.prototype.createStringPattern = function createStringPattern(stringTypes) {\n        var patterns = {\n            \"``\": \"((`[^`]*($|`))+)\",\n            \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n            \"\\\"\\\"\": \"((\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*(\\\"|$))+)\",\n            \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n            \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\"\n        };\n\n        return stringTypes.map(function (t) {\n            return patterns[t];\n        }).join(\"|\");\n    };\n\n    Tokenizer.prototype.createParenRegex = function createParenRegex(parens) {\n        var _this = this;\n\n        return new RegExp(\"^(\" + parens.map(function (p) {\n            return _this.escapeParen(p);\n        }).join(\"|\") + \")\", \"i\");\n    };\n\n    Tokenizer.prototype.escapeParen = function escapeParen(paren) {\n        if (paren == \"\\{{2}?\" || paren == \"\\}{2}?\") {\n            return paren;\n        }\n\n        if (paren.length === 1) {\n            // A single punctuation character\n            return (0, _escapeRegExp2[\"default\"])(paren);\n        } else {\n            // longer word\n            return \"\\\\b\" + paren + \"\\\\b\";\n        }\n    };\n\n    Tokenizer.prototype.createPlaceholderRegex = function createPlaceholderRegex(types, pattern) {\n        if ((0, _isEmpty2[\"default\"])(types)) {\n            return false;\n        }\n        var typesRegex = types.map(_escapeRegExp2[\"default\"]).join(\"|\");\n\n        return new RegExp(\"^((?:\" + typesRegex + \")(?:\" + pattern + \"))\");\n    };\n\n    /**\n     * Takes a SQL string and breaks it into tokens.\n     * Each token is an object with type and value.\n     *\n     * @param {String} input The SQL string\n     * @return {Object[]} tokens An array of tokens.\n     *  @return {String} token.type\n     *  @return {String} token.value\n     */\n\n\n    Tokenizer.prototype.tokenize = function tokenize(input) {\n        var tokens = [];\n        var token = void 0;\n\n        // Keep processing the string until it is empty\n        while (input.length) {\n            // Get the next token and the token type\n            token = this.getNextToken(input, token);\n            // Advance the string\n            input = input.substring(token.value.length);\n\n            tokens.push(token);\n        }\n        return tokens;\n    };\n\n    Tokenizer.prototype.getNextToken = function getNextToken(input, previousToken) {\n        return this.getWhitespaceToken(input) || this.getCommentToken(input) || this.getStringToken(input) || this.getOpenParenToken(input) || this.getCloseParenToken(input) || this.getPlaceholderToken(input) || this.getNumberToken(input) || this.getReservedWordToken(input, previousToken) || this.getWordToken(input) || this.getOperatorToken(input);\n    };\n\n    Tokenizer.prototype.getWhitespaceToken = function getWhitespaceToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WHITESPACE,\n            regex: this.WHITESPACE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCommentToken = function getCommentToken(input) {\n        return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n    };\n\n    Tokenizer.prototype.getLineCommentToken = function getLineCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].LINE_COMMENT,\n            regex: this.LINE_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getBlockCommentToken = function getBlockCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].BLOCK_COMMENT,\n            regex: this.BLOCK_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getStringToken = function getStringToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].STRING,\n            regex: this.STRING_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getOpenParenToken = function getOpenParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPEN_PAREN,\n            regex: this.OPEN_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCloseParenToken = function getCloseParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].CLOSE_PAREN,\n            regex: this.CLOSE_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderToken = function getPlaceholderToken(input) {\n        return this.getIdentNamedPlaceholderToken(input) || this.getStringNamedPlaceholderToken(input) || this.getIndexedPlaceholderToken(input);\n    };\n\n    Tokenizer.prototype.getIdentNamedPlaceholderToken = function getIdentNamedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getStringNamedPlaceholderToken = function getStringNamedPlaceholderToken(input) {\n        var _this2 = this;\n\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return _this2.getEscapedPlaceholderKey({ key: v.slice(2, -1), quoteChar: v.slice(-1) });\n            }\n        });\n    };\n\n    Tokenizer.prototype.getIndexedPlaceholderToken = function getIndexedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.INDEXED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderTokenWithKey = function getPlaceholderTokenWithKey(_ref) {\n        var input = _ref.input,\n            regex = _ref.regex,\n            parseKey = _ref.parseKey;\n\n        var token = this.getTokenOnFirstMatch({ input: input, regex: regex, type: _tokenTypes2[\"default\"].PLACEHOLDER });\n        if (token) {\n            token.key = parseKey(token.value);\n        }\n        return token;\n    };\n\n    Tokenizer.prototype.getEscapedPlaceholderKey = function getEscapedPlaceholderKey(_ref2) {\n        var key = _ref2.key,\n            quoteChar = _ref2.quoteChar;\n\n        return key.replace(new RegExp((0, _escapeRegExp2[\"default\"])(\"\\\\\") + quoteChar, \"g\"), quoteChar);\n    };\n\n    // Decimal, binary, or hex numbers\n\n\n    Tokenizer.prototype.getNumberToken = function getNumberToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].NUMBER,\n            regex: this.NUMBER_REGEX\n        });\n    };\n\n    // Punctuation and symbols\n\n\n    Tokenizer.prototype.getOperatorToken = function getOperatorToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPERATOR,\n            regex: this.OPERATOR_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getReservedWordToken = function getReservedWordToken(input, previousToken) {\n        // A reserved word cannot be preceded by a \".\"\n        // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n        if (previousToken && previousToken.value && previousToken.value === \".\") {\n            return;\n        }\n        return this.getToplevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getPlainReservedToken(input);\n    };\n\n    Tokenizer.prototype.getToplevelReservedToken = function getToplevelReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_TOPLEVEL,\n            regex: this.RESERVED_TOPLEVEL_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getNewlineReservedToken = function getNewlineReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_NEWLINE,\n            regex: this.RESERVED_NEWLINE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlainReservedToken = function getPlainReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED,\n            regex: this.RESERVED_PLAIN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getWordToken = function getWordToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WORD,\n            regex: this.WORD_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getTokenOnFirstMatch = function getTokenOnFirstMatch(_ref3) {\n        var input = _ref3.input,\n            type = _ref3.type,\n            regex = _ref3.regex;\n\n        var matches = input.match(regex);\n\n        if (matches) {\n            return { type: type, value: matches[1] };\n        }\n    };\n\n    return Tokenizer;\n}();\n\nexports[\"default\"] = Tokenizer;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _Formatter = require(\"../core/Formatter\");\n\nvar _Formatter2 = _interopRequireDefault(_Formatter);\n\nvar _Tokenizer = require(\"../core/Tokenizer\");\n\nvar _Tokenizer2 = _interopRequireDefault(_Tokenizer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar reservedWords = [\"ABS\", \"ACTIVATE\", \"ALIAS\", \"ALL\", \"ALLOCATE\", \"ALLOW\", \"ALTER\", \"ANY\", \"ARE\", \"ARRAY\", \"AS\", \"ASC\", \"ASENSITIVE\", \"ASSOCIATE\", \"ASUTIME\", \"ASYMMETRIC\", \"AT\", \"ATOMIC\", \"ATTRIBUTES\", \"AUDIT\", \"AUTHORIZATION\", \"AUX\", \"AUXILIARY\", \"AVG\", \"BEFORE\", \"BEGIN\", \"BETWEEN\", \"BIGINT\", \"BINARY\", \"BLOB\", \"BOOLEAN\", \"BOTH\", \"BUFFERPOOL\", \"BY\", \"CACHE\", \"CALL\", \"CALLED\", \"CAPTURE\", \"CARDINALITY\", \"CASCADED\", \"CASE\", \"CAST\", \"CCSID\", \"CEIL\", \"CEILING\", \"CHAR\", \"CHARACTER\", \"CHARACTER_LENGTH\", \"CHAR_LENGTH\", \"CHECK\", \"CLOB\", \"CLONE\", \"CLOSE\", \"CLUSTER\", \"COALESCE\", \"COLLATE\", \"COLLECT\", \"COLLECTION\", \"COLLID\", \"COLUMN\", \"COMMENT\", \"COMMIT\", \"CONCAT\", \"CONDITION\", \"CONNECT\", \"CONNECTION\", \"CONSTRAINT\", \"CONTAINS\", \"CONTINUE\", \"CONVERT\", \"CORR\", \"CORRESPONDING\", \"COUNT\", \"COUNT_BIG\", \"COVAR_POP\", \"COVAR_SAMP\", \"CREATE\", \"CROSS\", \"CUBE\", \"CUME_DIST\", \"CURRENT\", \"CURRENT_DATE\", \"CURRENT_DEFAULT_TRANSFORM_GROUP\", \"CURRENT_LC_CTYPE\", \"CURRENT_PATH\", \"CURRENT_ROLE\", \"CURRENT_SCHEMA\", \"CURRENT_SERVER\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_TIMEZONE\", \"CURRENT_TRANSFORM_GROUP_FOR_TYPE\", \"CURRENT_USER\", \"CURSOR\", \"CYCLE\", \"DATA\", \"DATABASE\", \"DATAPARTITIONNAME\", \"DATAPARTITIONNUM\", \"DATE\", \"DAY\", \"DAYS\", \"DB2GENERAL\", \"DB2GENRL\", \"DB2SQL\", \"DBINFO\", \"DBPARTITIONNAME\", \"DBPARTITIONNUM\", \"DEALLOCATE\", \"DEC\", \"DECIMAL\", \"DECLARE\", \"DEFAULT\", \"DEFAULTS\", \"DEFINITION\", \"DELETE\", \"DENSERANK\", \"DENSE_RANK\", \"DEREF\", \"DESCRIBE\", \"DESCRIPTOR\", \"DETERMINISTIC\", \"DIAGNOSTICS\", \"DISABLE\", \"DISALLOW\", \"DISCONNECT\", \"DISTINCT\", \"DO\", \"DOCUMENT\", \"DOUBLE\", \"DROP\", \"DSSIZE\", \"DYNAMIC\", \"EACH\", \"EDITPROC\", \"ELEMENT\", \"ELSE\", \"ELSEIF\", \"ENABLE\", \"ENCODING\", \"ENCRYPTION\", \"END\", \"END-EXEC\", \"ENDING\", \"ERASE\", \"ESCAPE\", \"EVERY\", \"EXCEPTION\", \"EXCLUDING\", \"EXCLUSIVE\", \"EXEC\", \"EXECUTE\", \"EXISTS\", \"EXIT\", \"EXP\", \"EXPLAIN\", \"EXTENDED\", \"EXTERNAL\", \"EXTRACT\", \"FALSE\", \"FENCED\", \"FETCH\", \"FIELDPROC\", \"FILE\", \"FILTER\", \"FINAL\", \"FIRST\", \"FLOAT\", \"FLOOR\", \"FOR\", \"FOREIGN\", \"FREE\", \"FULL\", \"FUNCTION\", \"FUSION\", \"GENERAL\", \"GENERATED\", \"GET\", \"GLOBAL\", \"GOTO\", \"GRANT\", \"GRAPHIC\", \"GROUP\", \"GROUPING\", \"HANDLER\", \"HASH\", \"HASHED_VALUE\", \"HINT\", \"HOLD\", \"HOUR\", \"HOURS\", \"IDENTITY\", \"IF\", \"IMMEDIATE\", \"IN\", \"INCLUDING\", \"INCLUSIVE\", \"INCREMENT\", \"INDEX\", \"INDICATOR\", \"INDICATORS\", \"INF\", \"INFINITY\", \"INHERIT\", \"INNER\", \"INOUT\", \"INSENSITIVE\", \"INSERT\", \"INT\", \"INTEGER\", \"INTEGRITY\", \"INTERSECTION\", \"INTERVAL\", \"INTO\", \"IS\", \"ISOBID\", \"ISOLATION\", \"ITERATE\", \"JAR\", \"JAVA\", \"KEEP\", \"KEY\", \"LABEL\", \"LANGUAGE\", \"LARGE\", \"LATERAL\", \"LC_CTYPE\", \"LEADING\", \"LEAVE\", \"LEFT\", \"LIKE\", \"LINKTYPE\", \"LN\", \"LOCAL\", \"LOCALDATE\", \"LOCALE\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"LOCATOR\", \"LOCATORS\", \"LOCK\", \"LOCKMAX\", \"LOCKSIZE\", \"LONG\", \"LOOP\", \"LOWER\", \"MAINTAINED\", \"MATCH\", \"MATERIALIZED\", \"MAX\", \"MAXVALUE\", \"MEMBER\", \"MERGE\", \"METHOD\", \"MICROSECOND\", \"MICROSECONDS\", \"MIN\", \"MINUTE\", \"MINUTES\", \"MINVALUE\", \"MOD\", \"MODE\", \"MODIFIES\", \"MODULE\", \"MONTH\", \"MONTHS\", \"MULTISET\", \"NAN\", \"NATIONAL\", \"NATURAL\", \"NCHAR\", \"NCLOB\", \"NEW\", \"NEW_TABLE\", \"NEXTVAL\", \"NO\", \"NOCACHE\", \"NOCYCLE\", \"NODENAME\", \"NODENUMBER\", \"NOMAXVALUE\", \"NOMINVALUE\", \"NONE\", \"NOORDER\", \"NORMALIZE\", \"NORMALIZED\", \"NOT\", \"NULL\", \"NULLIF\", \"NULLS\", \"NUMERIC\", \"NUMPARTS\", \"OBID\", \"OCTET_LENGTH\", \"OF\", \"OFFSET\", \"OLD\", \"OLD_TABLE\", \"ON\", \"ONLY\", \"OPEN\", \"OPTIMIZATION\", \"OPTIMIZE\", \"OPTION\", \"ORDER\", \"OUT\", \"OUTER\", \"OVER\", \"OVERLAPS\", \"OVERLAY\", \"OVERRIDING\", \"PACKAGE\", \"PADDED\", \"PAGESIZE\", \"PARAMETER\", \"PART\", \"PARTITION\", \"PARTITIONED\", \"PARTITIONING\", \"PARTITIONS\", \"PASSWORD\", \"PATH\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"PERCENT_RANK\", \"PIECESIZE\", \"PLAN\", \"POSITION\", \"POWER\", \"PRECISION\", \"PREPARE\", \"PREVVAL\", \"PRIMARY\", \"PRIQTY\", \"PRIVILEGES\", \"PROCEDURE\", \"PROGRAM\", \"PSID\", \"PUBLIC\", \"QUERY\", \"QUERYNO\", \"RANGE\", \"RANK\", \"READ\", \"READS\", \"REAL\", \"RECOVERY\", \"RECURSIVE\", \"REF\", \"REFERENCES\", \"REFERENCING\", \"REFRESH\", \"REGR_AVGX\", \"REGR_AVGY\", \"REGR_COUNT\", \"REGR_INTERCEPT\", \"REGR_R2\", \"REGR_SLOPE\", \"REGR_SXX\", \"REGR_SXY\", \"REGR_SYY\", \"RELEASE\", \"RENAME\", \"REPEAT\", \"RESET\", \"RESIGNAL\", \"RESTART\", \"RESTRICT\", \"RESULT\", \"RESULT_SET_LOCATOR\", \"RETURN\", \"RETURNS\", \"REVOKE\", \"RIGHT\", \"ROLE\", \"ROLLBACK\", \"ROLLUP\", \"ROUND_CEILING\", \"ROUND_DOWN\", \"ROUND_FLOOR\", \"ROUND_HALF_DOWN\", \"ROUND_HALF_EVEN\", \"ROUND_HALF_UP\", \"ROUND_UP\", \"ROUTINE\", \"ROW\", \"ROWNUMBER\", \"ROWS\", \"ROWSET\", \"ROW_NUMBER\", \"RRN\", \"RUN\", \"SAVEPOINT\", \"SCHEMA\", \"SCOPE\", \"SCRATCHPAD\", \"SCROLL\", \"SEARCH\", \"SECOND\", \"SECONDS\", \"SECQTY\", \"SECURITY\", \"SENSITIVE\", \"SEQUENCE\", \"SESSION\", \"SESSION_USER\", \"SIGNAL\", \"SIMILAR\", \"SIMPLE\", \"SMALLINT\", \"SNAN\", \"SOME\", \"SOURCE\", \"SPECIFIC\", \"SPECIFICTYPE\", \"SQL\", \"SQLEXCEPTION\", \"SQLID\", \"SQLSTATE\", \"SQLWARNING\", \"SQRT\", \"STACKED\", \"STANDARD\", \"START\", \"STARTING\", \"STATEMENT\", \"STATIC\", \"STATMENT\", \"STAY\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"STOGROUP\", \"STORES\", \"STYLE\", \"SUBMULTISET\", \"SUBSTRING\", \"SUM\", \"SUMMARY\", \"SYMMETRIC\", \"SYNONYM\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSTEM\", \"SYSTEM_USER\", \"TABLE\", \"TABLESAMPLE\", \"TABLESPACE\", \"THEN\", \"TIME\", \"TIMESTAMP\", \"TIMEZONE_HOUR\", \"TIMEZONE_MINUTE\", \"TO\", \"TRAILING\", \"TRANSACTION\", \"TRANSLATE\", \"TRANSLATION\", \"TREAT\", \"TRIGGER\", \"TRIM\", \"TRUE\", \"TRUNCATE\", \"TYPE\", \"UESCAPE\", \"UNDO\", \"UNIQUE\", \"UNKNOWN\", \"UNNEST\", \"UNTIL\", \"UPPER\", \"USAGE\", \"USER\", \"USING\", \"VALIDPROC\", \"VALUE\", \"VARCHAR\", \"VARIABLE\", \"VARIANT\", \"VARYING\", \"VAR_POP\", \"VAR_SAMP\", \"VCAT\", \"VERSION\", \"VIEW\", \"VOLATILE\", \"VOLUMES\", \"WHEN\", \"WHENEVER\", \"WHILE\", \"WIDTH_BUCKET\", \"WINDOW\", \"WITH\", \"WITHIN\", \"WITHOUT\", \"WLM\", \"WRITE\", \"XMLELEMENT\", \"XMLEXISTS\", \"XMLNAMESPACES\", \"YEAR\", \"YEARS\"];\n\nvar reservedToplevelWords = [\"ADD\", \"AFTER\", \"ALTER COLUMN\", \"ALTER TABLE\", \"DELETE FROM\", \"EXCEPT\", \"FETCH FIRST\", \"FROM\", \"GROUP BY\", \"GO\", \"HAVING\", \"INSERT INTO\", \"INTERSECT\", \"LIMIT\", \"ORDER BY\", \"SELECT\", \"SET CURRENT SCHEMA\", \"SET SCHEMA\", \"SET\", \"UNION ALL\", \"UPDATE\", \"VALUES\", \"WHERE\"];\n\nvar reservedNewlineWords = [\"AND\", \"CROSS JOIN\", \"INNER JOIN\", \"JOIN\", \"LEFT JOIN\", \"LEFT OUTER JOIN\", \"OR\", \"OUTER JOIN\", \"RIGHT JOIN\", \"RIGHT OUTER JOIN\"];\n\nvar tokenizer = void 0;\n\nvar Db2Formatter = function () {\n    /**\r\n     * @param {Object} cfg Different set of configurations\r\n     */\n    function Db2Formatter(cfg) {\n        _classCallCheck(this, Db2Formatter);\n\n        this.cfg = cfg;\n    }\n\n    /**\r\n     * Formats DB2 query to make it easier to read\r\n     *\r\n     * @param {String} query The DB2 query string\r\n     * @return {String} formatted string\r\n     */\n\n\n    Db2Formatter.prototype.format = function format(query) {\n        if (!tokenizer) {\n            tokenizer = new _Tokenizer2[\"default\"]({\n                reservedWords: reservedWords,\n                reservedToplevelWords: reservedToplevelWords,\n                reservedNewlineWords: reservedNewlineWords,\n                stringTypes: [\"\\\"\\\"\", \"''\", \"``\", \"[]\"],\n                openParens: [\"(\"],\n                closeParens: [\")\"],\n                indexedPlaceholderTypes: [\"?\"],\n                namedPlaceholderTypes: [\":\"],\n                lineCommentTypes: [\"--\"],\n                specialWordChars: [\"#\", \"@\"]\n            });\n        }\n        return new _Formatter2[\"default\"](this.cfg, tokenizer).format(query);\n    };\n\n    return Db2Formatter;\n}();\n\nexports[\"default\"] = Db2Formatter;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _Formatter = require(\"../core/Formatter\");\n\nvar _Formatter2 = _interopRequireDefault(_Formatter);\n\nvar _Tokenizer = require(\"../core/Tokenizer\");\n\nvar _Tokenizer2 = _interopRequireDefault(_Tokenizer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar reservedWords = [\"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"ANY\", \"ARRAY\", \"AS\", \"ASC\", \"BEGIN\", \"BETWEEN\", \"BINARY\", \"BOOLEAN\", \"BREAK\", \"BUCKET\", \"BUILD\", \"BY\", \"CALL\", \"CASE\", \"CAST\", \"CLUSTER\", \"COLLATE\", \"COLLECTION\", \"COMMIT\", \"CONNECT\", \"CONTINUE\", \"CORRELATE\", \"COVER\", \"CREATE\", \"DATABASE\", \"DATASET\", \"DATASTORE\", \"DECLARE\", \"DECREMENT\", \"DELETE\", \"DERIVED\", \"DESC\", \"DESCRIBE\", \"DISTINCT\", \"DO\", \"DROP\", \"EACH\", \"ELEMENT\", \"ELSE\", \"END\", \"EVERY\", \"EXCEPT\", \"EXCLUDE\", \"EXECUTE\", \"EXISTS\", \"EXPLAIN\", \"FALSE\", \"FETCH\", \"FIRST\", \"FLATTEN\", \"FOR\", \"FORCE\", \"FROM\", \"FUNCTION\", \"GRANT\", \"GROUP\", \"GSI\", \"HAVING\", \"IF\", \"IGNORE\", \"ILIKE\", \"IN\", \"INCLUDE\", \"INCREMENT\", \"INDEX\", \"INFER\", \"INLINE\", \"INNER\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"JOIN\", \"KEY\", \"KEYS\", \"KEYSPACE\", \"KNOWN\", \"LAST\", \"LEFT\", \"LET\", \"LETTING\", \"LIKE\", \"LIMIT\", \"LSM\", \"MAP\", \"MAPPING\", \"MATCHED\", \"MATERIALIZED\", \"MERGE\", \"MINUS\", \"MISSING\", \"NAMESPACE\", \"NEST\", \"NOT\", \"NULL\", \"NUMBER\", \"OBJECT\", \"OFFSET\", \"ON\", \"OPTION\", \"OR\", \"ORDER\", \"OUTER\", \"OVER\", \"PARSE\", \"PARTITION\", \"PASSWORD\", \"PATH\", \"POOL\", \"PREPARE\", \"PRIMARY\", \"PRIVATE\", \"PRIVILEGE\", \"PROCEDURE\", \"PUBLIC\", \"RAW\", \"REALM\", \"REDUCE\", \"RENAME\", \"RETURN\", \"RETURNING\", \"REVOKE\", \"RIGHT\", \"ROLE\", \"ROLLBACK\", \"SATISFIES\", \"SCHEMA\", \"SELECT\", \"SELF\", \"SEMI\", \"SET\", \"SHOW\", \"SOME\", \"START\", \"STATISTICS\", \"STRING\", \"SYSTEM\", \"THEN\", \"TO\", \"TRANSACTION\", \"TRIGGER\", \"TRUE\", \"TRUNCATE\", \"UNDER\", \"UNION\", \"UNIQUE\", \"UNKNOWN\", \"UNNEST\", \"UNSET\", \"UPDATE\", \"UPSERT\", \"USE\", \"USER\", \"USING\", \"VALIDATE\", \"VALUE\", \"VALUED\", \"VALUES\", \"VIA\", \"VIEW\", \"WHEN\", \"WHERE\", \"WHILE\", \"WITH\", \"WITHIN\", \"WORK\", \"XOR\"];\n\nvar reservedToplevelWords = [\"DELETE FROM\", \"EXCEPT ALL\", \"EXCEPT\", \"EXPLAIN DELETE FROM\", \"EXPLAIN UPDATE\", \"EXPLAIN UPSERT\", \"FROM\", \"GROUP BY\", \"HAVING\", \"INFER\", \"INSERT INTO\", \"INTERSECT ALL\", \"INTERSECT\", \"LET\", \"LIMIT\", \"MERGE\", \"NEST\", \"ORDER BY\", \"PREPARE\", \"SELECT\", \"SET CURRENT SCHEMA\", \"SET SCHEMA\", \"SET\", \"UNION ALL\", \"UNION\", \"UNNEST\", \"UPDATE\", \"UPSERT\", \"USE KEYS\", \"VALUES\", \"WHERE\"];\n\nvar reservedNewlineWords = [\"AND\", \"INNER JOIN\", \"JOIN\", \"LEFT JOIN\", \"LEFT OUTER JOIN\", \"OR\", \"OUTER JOIN\", \"RIGHT JOIN\", \"RIGHT OUTER JOIN\", \"XOR\"];\n\nvar tokenizer = void 0;\n\nvar N1qlFormatter = function () {\n    /**\r\n     * @param {Object} cfg Different set of configurations\r\n     */\n    function N1qlFormatter(cfg) {\n        _classCallCheck(this, N1qlFormatter);\n\n        this.cfg = cfg;\n    }\n\n    /**\r\n     * Format the whitespace in a N1QL string to make it easier to read\r\n     *\r\n     * @param {String} query The N1QL string\r\n     * @return {String} formatted string\r\n     */\n\n\n    N1qlFormatter.prototype.format = function format(query) {\n        if (!tokenizer) {\n            tokenizer = new _Tokenizer2[\"default\"]({\n                reservedWords: reservedWords,\n                reservedToplevelWords: reservedToplevelWords,\n                reservedNewlineWords: reservedNewlineWords,\n                stringTypes: [\"\\\"\\\"\", \"''\", \"``\"],\n                openParens: [\"(\", \"[\", \"{\"],\n                closeParens: [\")\", \"]\", \"}\"],\n                namedPlaceholderTypes: [\"$\"],\n                lineCommentTypes: [\"#\", \"--\"]\n            });\n        }\n        return new _Formatter2[\"default\"](this.cfg, tokenizer).format(query);\n    };\n\n    return N1qlFormatter;\n}();\n\nexports[\"default\"] = N1qlFormatter;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _Formatter = require(\"../core/Formatter\");\n\nvar _Formatter2 = _interopRequireDefault(_Formatter);\n\nvar _Tokenizer = require(\"../core/Tokenizer\");\n\nvar _Tokenizer2 = _interopRequireDefault(_Tokenizer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar reservedWords = [\"A\", \"ACCESSIBLE\", \"AGENT\", \"AGGREGATE\", \"ALL\", \"ALTER\", \"ANY\", \"ARRAY\", \"AS\", \"ASC\", \"AT\", \"ATTRIBUTE\", \"AUTHID\", \"AVG\", \"BETWEEN\", \"BFILE_BASE\", \"BINARY_INTEGER\", \"BINARY\", \"BLOB_BASE\", \"BLOCK\", \"BODY\", \"BOOLEAN\", \"BOTH\", \"BOUND\", \"BULK\", \"BY\", \"BYTE\", \"C\", \"CALL\", \"CALLING\", \"CASCADE\", \"CASE\", \"CHAR_BASE\", \"CHAR\", \"CHARACTER\", \"CHARSET\", \"CHARSETFORM\", \"CHARSETID\", \"CHECK\", \"CLOB_BASE\", \"CLONE\", \"CLOSE\", \"CLUSTER\", \"CLUSTERS\", \"COALESCE\", \"COLAUTH\", \"COLLECT\", \"COLUMNS\", \"COMMENT\", \"COMMIT\", \"COMMITTED\", \"COMPILED\", \"COMPRESS\", \"CONNECT\", \"CONSTANT\", \"CONSTRUCTOR\", \"CONTEXT\", \"CONTINUE\", \"CONVERT\", \"COUNT\", \"CRASH\", \"CREATE\", \"CREDENTIAL\", \"CURRENT\", \"CURRVAL\", \"CURSOR\", \"CUSTOMDATUM\", \"DANGLING\", \"DATA\", \"DATE_BASE\", \"DATE\", \"DAY\", \"DECIMAL\", \"DEFAULT\", \"DEFINE\", \"DELETE\", \"DESC\", \"DETERMINISTIC\", \"DIRECTORY\", \"DISTINCT\", \"DO\", \"DOUBLE\", \"DROP\", \"DURATION\", \"ELEMENT\", \"ELSIF\", \"EMPTY\", \"ESCAPE\", \"EXCEPTIONS\", \"EXCLUSIVE\", \"EXECUTE\", \"EXISTS\", \"EXIT\", \"EXTENDS\", \"EXTERNAL\", \"EXTRACT\", \"FALSE\", \"FETCH\", \"FINAL\", \"FIRST\", \"FIXED\", \"FLOAT\", \"FOR\", \"FORALL\", \"FORCE\", \"FROM\", \"FUNCTION\", \"GENERAL\", \"GOTO\", \"GRANT\", \"GROUP\", \"HASH\", \"HEAP\", \"HIDDEN\", \"HOUR\", \"IDENTIFIED\", \"IF\", \"IMMEDIATE\", \"IN\", \"INCLUDING\", \"INDEX\", \"INDEXES\", \"INDICATOR\", \"INDICES\", \"INFINITE\", \"INSTANTIABLE\", \"INT\", \"INTEGER\", \"INTERFACE\", \"INTERVAL\", \"INTO\", \"INVALIDATE\", \"IS\", \"ISOLATION\", \"JAVA\", \"LANGUAGE\", \"LARGE\", \"LEADING\", \"LENGTH\", \"LEVEL\", \"LIBRARY\", \"LIKE\", \"LIKE2\", \"LIKE4\", \"LIKEC\", \"LIMITED\", \"LOCAL\", \"LOCK\", \"LONG\", \"MAP\", \"MAX\", \"MAXLEN\", \"MEMBER\", \"MERGE\", \"MIN\", \"MINUS\", \"MINUTE\", \"MLSLABEL\", \"MOD\", \"MODE\", \"MONTH\", \"MULTISET\", \"NAME\", \"NAN\", \"NATIONAL\", \"NATIVE\", \"NATURAL\", \"NATURALN\", \"NCHAR\", \"NEW\", \"NEXTVAL\", \"NOCOMPRESS\", \"NOCOPY\", \"NOT\", \"NOWAIT\", \"NULL\", \"NULLIF\", \"NUMBER_BASE\", \"NUMBER\", \"OBJECT\", \"OCICOLL\", \"OCIDATE\", \"OCIDATETIME\", \"OCIDURATION\", \"OCIINTERVAL\", \"OCILOBLOCATOR\", \"OCINUMBER\", \"OCIRAW\", \"OCIREF\", \"OCIREFCURSOR\", \"OCIROWID\", \"OCISTRING\", \"OCITYPE\", \"OF\", \"OLD\", \"ON\", \"ONLY\", \"OPAQUE\", \"OPEN\", \"OPERATOR\", \"OPTION\", \"ORACLE\", \"ORADATA\", \"ORDER\", \"ORGANIZATION\", \"ORLANY\", \"ORLVARY\", \"OTHERS\", \"OUT\", \"OVERLAPS\", \"OVERRIDING\", \"PACKAGE\", \"PARALLEL_ENABLE\", \"PARAMETER\", \"PARAMETERS\", \"PARENT\", \"PARTITION\", \"PASCAL\", \"PCTFREE\", \"PIPE\", \"PIPELINED\", \"PLS_INTEGER\", \"PLUGGABLE\", \"POSITIVE\", \"POSITIVEN\", \"PRAGMA\", \"PRECISION\", \"PRIOR\", \"PRIVATE\", \"PROCEDURE\", \"PUBLIC\", \"RAISE\", \"RANGE\", \"RAW\", \"READ\", \"REAL\", \"RECORD\", \"REF\", \"REFERENCE\", \"RELEASE\", \"RELIES_ON\", \"REM\", \"REMAINDER\", \"RENAME\", \"RESOURCE\", \"RESULT_CACHE\", \"RESULT\", \"RETURN\", \"RETURNING\", \"REVERSE\", \"REVOKE\", \"ROLLBACK\", \"ROW\", \"ROWID\", \"ROWNUM\", \"ROWTYPE\", \"SAMPLE\", \"SAVE\", \"SAVEPOINT\", \"SB1\", \"SB2\", \"SB4\", \"SECOND\", \"SEGMENT\", \"SELF\", \"SEPARATE\", \"SEQUENCE\", \"SERIALIZABLE\", \"SHARE\", \"SHORT\", \"SIZE_T\", \"SIZE\", \"SMALLINT\", \"SOME\", \"SPACE\", \"SPARSE\", \"SQL\", \"SQLCODE\", \"SQLDATA\", \"SQLERRM\", \"SQLNAME\", \"SQLSTATE\", \"STANDARD\", \"START\", \"STATIC\", \"STDDEV\", \"STORED\", \"STRING\", \"STRUCT\", \"STYLE\", \"SUBMULTISET\", \"SUBPARTITION\", \"SUBSTITUTABLE\", \"SUBTYPE\", \"SUCCESSFUL\", \"SUM\", \"SYNONYM\", \"SYSDATE\", \"TABAUTH\", \"TABLE\", \"TDO\", \"THE\", \"THEN\", \"TIME\", \"TIMESTAMP\", \"TIMEZONE_ABBR\", \"TIMEZONE_HOUR\", \"TIMEZONE_MINUTE\", \"TIMEZONE_REGION\", \"TO\", \"TRAILING\", \"TRANSACTION\", \"TRANSACTIONAL\", \"TRIGGER\", \"TRUE\", \"TRUSTED\", \"TYPE\", \"UB1\", \"UB2\", \"UB4\", \"UID\", \"UNDER\", \"UNIQUE\", \"UNPLUG\", \"UNSIGNED\", \"UNTRUSTED\", \"USE\", \"USER\", \"USING\", \"VALIDATE\", \"VALIST\", \"VALUE\", \"VARCHAR\", \"VARCHAR2\", \"VARIABLE\", \"VARIANCE\", \"VARRAY\", \"VARYING\", \"VIEW\", \"VIEWS\", \"VOID\", \"WHENEVER\", \"WHILE\", \"WITH\", \"WORK\", \"WRAPPED\", \"WRITE\", \"YEAR\", \"ZONE\"];\n\nvar reservedToplevelWords = [\"ADD\", \"ALTER COLUMN\", \"ALTER TABLE\", \"BEGIN\", \"CONNECT BY\", \"DECLARE\", \"DELETE FROM\", \"DELETE\", \"END\", \"EXCEPT\", \"EXCEPTION\", \"FETCH FIRST\", \"FROM\", \"GROUP BY\", \"HAVING\", \"INSERT INTO\", \"INSERT\", \"INTERSECT\", \"LIMIT\", \"LOOP\", \"MODIFY\", \"ORDER BY\", \"SELECT\", \"SET CURRENT SCHEMA\", \"SET SCHEMA\", \"SET\", \"START WITH\", \"UNION ALL\", \"UNION\", \"UPDATE\", \"VALUES\", \"WHERE\"];\n\nvar reservedNewlineWords = [\"AND\", \"CROSS APPLY\", \"CROSS JOIN\", \"ELSE\", \"END\", \"INNER JOIN\", \"JOIN\", \"LEFT JOIN\", \"LEFT OUTER JOIN\", \"OR\", \"OUTER APPLY\", \"OUTER JOIN\", \"RIGHT JOIN\", \"RIGHT OUTER JOIN\", \"WHEN\", \"XOR\"];\n\nvar tokenizer = void 0;\n\nvar PlSqlFormatter = function () {\n    /**\r\n     * @param {Object} cfg Different set of configurations\r\n     */\n    function PlSqlFormatter(cfg) {\n        _classCallCheck(this, PlSqlFormatter);\n\n        this.cfg = cfg;\n    }\n\n    /**\r\n     * Format the whitespace in a PL/SQL string to make it easier to read\r\n     *\r\n     * @param {String} query The PL/SQL string\r\n     * @return {String} formatted string\r\n     */\n\n\n    PlSqlFormatter.prototype.format = function format(query) {\n        if (!tokenizer) {\n            tokenizer = new _Tokenizer2[\"default\"]({\n                reservedWords: reservedWords,\n                reservedToplevelWords: reservedToplevelWords,\n                reservedNewlineWords: reservedNewlineWords,\n                stringTypes: [\"\\\"\\\"\", \"N''\", \"''\", \"``\"],\n                openParens: [\"(\", \"CASE\"],\n                closeParens: [\")\", \"END\"],\n                indexedPlaceholderTypes: [\"?\"],\n                namedPlaceholderTypes: [\":\"],\n                lineCommentTypes: [\"--\"],\n                specialWordChars: [\"_\", \"$\", \"#\", \".\", \"@\"]\n            });\n        }\n        return new _Formatter2[\"default\"](this.cfg, tokenizer).format(query);\n    };\n\n    return PlSqlFormatter;\n}();\n\nexports[\"default\"] = PlSqlFormatter;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _Formatter = require(\"../core/Formatter\");\n\nvar _Formatter2 = _interopRequireDefault(_Formatter);\n\nvar _Tokenizer = require(\"../core/Tokenizer\");\n\nvar _Tokenizer2 = _interopRequireDefault(_Tokenizer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar reservedWords = [\"ACCESSIBLE\", \"ACTION\", \"AGAINST\", \"AGGREGATE\", \"ALGORITHM\", \"ALL\", \"ALTER\", \"ANALYSE\", \"ANALYZE\", \"AS\", \"ASC\", \"AUTOCOMMIT\", \"AUTO_INCREMENT\", \"BACKUP\", \"BEGIN\", \"BETWEEN\", \"BINLOG\", \"BOTH\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHANGED\", \"CHARACTER SET\", \"CHARSET\", \"CHECK\", \"CHECKSUM\", \"COLLATE\", \"COLLATION\", \"COLUMN\", \"COLUMNS\", \"COMMENT\", \"COMMIT\", \"COMMITTED\", \"COMPRESSED\", \"CONCURRENT\", \"CONSTRAINT\", \"CONTAINS\", \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT_TIMESTAMP\", \"DATABASE\", \"DATABASES\", \"DAY\", \"DAY_HOUR\", \"DAY_MINUTE\", \"DAY_SECOND\", \"DEFAULT\", \"DEFINER\", \"DELAYED\", \"DELETE\", \"DESC\", \"DESCRIBE\", \"DETERMINISTIC\", \"DISTINCT\", \"DISTINCTROW\", \"DIV\", \"DO\", \"DROP\", \"DUMPFILE\", \"DUPLICATE\", \"DYNAMIC\", \"ELSE\", \"ENCLOSED\", \"END\", \"ENGINE\", \"ENGINES\", \"ENGINE_TYPE\", \"ESCAPE\", \"ESCAPED\", \"EVENTS\", \"EXEC\", \"EXECUTE\", \"EXISTS\", \"EXPLAIN\", \"EXTENDED\", \"FAST\", \"FETCH\", \"FIELDS\", \"FILE\", \"FIRST\", \"FIXED\", \"FLUSH\", \"FOR\", \"FORCE\", \"FOREIGN\", \"FULL\", \"FULLTEXT\", \"FUNCTION\", \"GLOBAL\", \"GRANT\", \"GRANTS\", \"GROUP_CONCAT\", \"HEAP\", \"HIGH_PRIORITY\", \"HOSTS\", \"HOUR\", \"HOUR_MINUTE\", \"HOUR_SECOND\", \"IDENTIFIED\", \"IF\", \"IFNULL\", \"IGNORE\", \"IN\", \"INDEX\", \"INDEXES\", \"INFILE\", \"INSERT\", \"INSERT_ID\", \"INSERT_METHOD\", \"INTERVAL\", \"INTO\", \"INVOKER\", \"IS\", \"ISOLATION\", \"KEY\", \"KEYS\", \"KILL\", \"LAST_INSERT_ID\", \"LEADING\", \"LEVEL\", \"LIKE\", \"LINEAR\", \"LINES\", \"LOAD\", \"LOCAL\", \"LOCK\", \"LOCKS\", \"LOGS\", \"LOW_PRIORITY\", \"MARIA\", \"MASTER\", \"MASTER_CONNECT_RETRY\", \"MASTER_HOST\", \"MASTER_LOG_FILE\", \"MATCH\", \"MAX_CONNECTIONS_PER_HOUR\", \"MAX_QUERIES_PER_HOUR\", \"MAX_ROWS\", \"MAX_UPDATES_PER_HOUR\", \"MAX_USER_CONNECTIONS\", \"MEDIUM\", \"MERGE\", \"MINUTE\", \"MINUTE_SECOND\", \"MIN_ROWS\", \"MODE\", \"MODIFY\", \"MONTH\", \"MRG_MYISAM\", \"MYISAM\", \"NAMES\", \"NATURAL\", \"NOT\", \"NOW()\", \"NULL\", \"OFFSET\", \"ON DELETE\", \"ON UPDATE\", \"ON\", \"ONLY\", \"OPEN\", \"OPTIMIZE\", \"OPTION\", \"OPTIONALLY\", \"OUTFILE\", \"PACK_KEYS\", \"PAGE\", \"PARTIAL\", \"PARTITION\", \"PARTITIONS\", \"PASSWORD\", \"PRIMARY\", \"PRIVILEGES\", \"PROCEDURE\", \"PROCESS\", \"PROCESSLIST\", \"PURGE\", \"QUICK\", \"RAID0\", \"RAID_CHUNKS\", \"RAID_CHUNKSIZE\", \"RAID_TYPE\", \"RANGE\", \"READ\", \"READ_ONLY\", \"READ_WRITE\", \"REFERENCES\", \"REGEXP\", \"RELOAD\", \"RENAME\", \"REPAIR\", \"REPEATABLE\", \"REPLACE\", \"REPLICATION\", \"RESET\", \"RESTORE\", \"RESTRICT\", \"RETURN\", \"RETURNS\", \"REVOKE\", \"RLIKE\", \"ROLLBACK\", \"ROW\", \"ROWS\", \"ROW_FORMAT\", \"SECOND\", \"SECURITY\", \"SEPARATOR\", \"SERIALIZABLE\", \"SESSION\", \"SHARE\", \"SHOW\", \"SHUTDOWN\", \"SLAVE\", \"SONAME\", \"SOUNDS\", \"SQL\", \"SQL_AUTO_IS_NULL\", \"SQL_BIG_RESULT\", \"SQL_BIG_SELECTS\", \"SQL_BIG_TABLES\", \"SQL_BUFFER_RESULT\", \"SQL_CACHE\", \"SQL_CALC_FOUND_ROWS\", \"SQL_LOG_BIN\", \"SQL_LOG_OFF\", \"SQL_LOG_UPDATE\", \"SQL_LOW_PRIORITY_UPDATES\", \"SQL_MAX_JOIN_SIZE\", \"SQL_NO_CACHE\", \"SQL_QUOTE_SHOW_CREATE\", \"SQL_SAFE_UPDATES\", \"SQL_SELECT_LIMIT\", \"SQL_SLAVE_SKIP_COUNTER\", \"SQL_SMALL_RESULT\", \"SQL_WARNINGS\", \"START\", \"STARTING\", \"STATUS\", \"STOP\", \"STORAGE\", \"STRAIGHT_JOIN\", \"STRING\", \"STRIPED\", \"SUPER\", \"TABLE\", \"TABLES\", \"TEMPORARY\", \"TERMINATED\", \"THEN\", \"TO\", \"TRAILING\", \"TRANSACTIONAL\", \"TRUE\", \"TRUNCATE\", \"TYPE\", \"TYPES\", \"UNCOMMITTED\", \"UNIQUE\", \"UNLOCK\", \"UNSIGNED\", \"USAGE\", \"USE\", \"USING\", \"VARIABLES\", \"VIEW\", \"WHEN\", \"WITH\", \"WORK\", \"WRITE\", \"YEAR_MONTH\"];\n\nvar reservedToplevelWords = [\"ADD\", \"AFTER\", \"ALTER COLUMN\", \"ALTER TABLE\", \"DELETE FROM\", \"EXCEPT\", \"FETCH FIRST\", \"FROM\", \"GROUP BY\", \"GO\", \"HAVING\", \"INSERT INTO\", \"INSERT\", \"INTERSECT\", \"LIMIT\", \"MODIFY\", \"ORDER BY\", \"SELECT\", \"SET CURRENT SCHEMA\", \"SET SCHEMA\", \"SET\", \"UNION ALL\", \"UNION\", \"UPDATE\", \"VALUES\", \"WHERE\"];\n\nvar reservedNewlineWords = [\"AND\", \"CROSS APPLY\", \"CROSS JOIN\", \"ELSE\", \"INNER JOIN\", \"JOIN\", \"LEFT JOIN\", \"LEFT OUTER JOIN\", \"OR\", \"OUTER APPLY\", \"OUTER JOIN\", \"RIGHT JOIN\", \"RIGHT OUTER JOIN\", \"WHEN\", \"XOR\"];\n\nvar tokenizer = void 0;\n\nvar StandardSqlFormatter = function () {\n    /**\n     * @param {Object} cfg Different set of configurations\n     */\n    function StandardSqlFormatter(cfg) {\n        _classCallCheck(this, StandardSqlFormatter);\n\n        this.cfg = cfg;\n    }\n\n    /**\n     * Format the whitespace in a Standard SQL string to make it easier to read\n     *\n     * @param {String} query The Standard SQL string\n     * @return {String} formatted string\n     */\n\n\n    StandardSqlFormatter.prototype.format = function format(query) {\n        if (!tokenizer) {\n            tokenizer = new _Tokenizer2[\"default\"]({\n                reservedWords: reservedWords,\n                reservedToplevelWords: reservedToplevelWords,\n                reservedNewlineWords: reservedNewlineWords,\n                stringTypes: [\"\\\"\\\"\", \"N''\", \"''\", \"``\", \"[]\"],\n                openParens: [\"(\", \"CASE\", \"\\{{2}?\"],\n                closeParens: [\")\", \"END\", \"\\}{2}?\"],\n                indexedPlaceholderTypes: [],\n                namedPlaceholderTypes: [\"@\", \":\", \"?\"],\n                lineCommentTypes: [\"#\", \"--\"]\n            });\n        }\n        return new _Formatter2[\"default\"](this.cfg, tokenizer).format(query);\n    };\n\n    return StandardSqlFormatter;\n}();\n\nexports[\"default\"] = StandardSqlFormatter;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _Db2Formatter = require(\"./languages/Db2Formatter\");\n\nvar _Db2Formatter2 = _interopRequireDefault(_Db2Formatter);\n\nvar _N1qlFormatter = require(\"./languages/N1qlFormatter\");\n\nvar _N1qlFormatter2 = _interopRequireDefault(_N1qlFormatter);\n\nvar _PlSqlFormatter = require(\"./languages/PlSqlFormatter\");\n\nvar _PlSqlFormatter2 = _interopRequireDefault(_PlSqlFormatter);\n\nvar _StandardSqlFormatter = require(\"./languages/StandardSqlFormatter\");\n\nvar _StandardSqlFormatter2 = _interopRequireDefault(_StandardSqlFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nexports[\"default\"] = {\n    /**\n     * Format whitespaces in a query to make it easier to read.\n     *\n     * @param {String} query\n     * @param {Object} cfg\n     *  @param {String} cfg.language Query language, default is Standard SQL\n     *  @param {String} cfg.indent Characters used for indentation, default is \"  \" (2 spaces)\n     *  @param {Object} cfg.params Collection of params for placeholder replacement\n     * @return {String}\n     */\n    format: function format(query, cfg) {\n        cfg = cfg || {};\n\n        switch (cfg.language) {\n            case \"db2\":\n                return new _Db2Formatter2[\"default\"](cfg).format(query);\n            case \"n1ql\":\n                return new _N1qlFormatter2[\"default\"](cfg).format(query);\n            case \"pl/sql\":\n                return new _PlSqlFormatter2[\"default\"](cfg).format(query);\n            case \"sql\":\n            case undefined:\n                return new _StandardSqlFormatter2[\"default\"](cfg).format(query);\n            default:\n                throw Error(\"Unsupported SQL dialect: \" + cfg.language);\n        }\n    }\n};\nmodule.exports = exports[\"default\"];","const sqlFormatter = require('../sql-formatter');\r\n\r\nonClickFormat = function () {\r\n    const src = document.getElementById(\"src\").value;\r\n\r\n    document.getElementById(\"out\").value = sqlFormatter.format(src);\r\n}"]}